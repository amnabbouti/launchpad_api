{
  "openapi": "3.0.3",
  "info": {
    "title": "Launchpad API",
    "description": "API documentation for the Launchpad application",
    "version": "1.0.0",
    "contact": {
      "email": "support@launchpad.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication endpoints for login, logout and profile access"
    },
    {
      "name": "Categories",
      "description": "Category management endpoints for hierarchical classification and organization of items"
    },
    {
      "name": "Item Locations",
      "description": "Item location management endpoints for tracking item distribution across storage locations"
    },
    {
      "name": "Items",
      "description": "Item management endpoints with optional filtering, search, and maintenance operations"
    },
    {
      "name": "Locations",
      "description": "Location management endpoints for organizing items in hierarchical storage structures"
    },
    {
      "name": "Organizations",
      "description": "Organization management endpoints for creating, accessing, and managing organizational data"
    },
    {
      "name": "Suppliers",
      "description": "Supplier management and item-supplier relationship endpoints for procurement and vendor management"
    },
    {
      "name": "Users",
      "description": "User management endpoints with role-based access control and organization filtering"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/UserProfile"
              },
              "access_token": {
                "type": "string",
                "description": "Encrypted token that needs to be decrypted",
                "example": "eyJpdiI6Im0zSlZuTVZHd0R2dGIrUGJMcEp..."
              },
              "token_type": {
                "type": "string",
                "example": "Bearer"
              }
            }
          },
          "message": {
            "type": "string",
            "example": "Login successful"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "null"
          },
          "message": {
            "type": "string",
            "example": "Logout successful"
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "email_verified_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2025-06-01T10:00:00Z"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-01T00:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-01T10:00:00Z"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "create_items",
              "view_items"
            ]
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "User"
                }
              }
            }
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "example": null
          }
        }
      },
      "Category": {
        "type": "object",
        "description": "A category represents a hierarchical classification system for organizing items. Categories support unlimited nesting levels and maintain automatic path generation.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique public identifier for the category (e.g., 'CAT-0001')",
            "example": "CAT-0001"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name of the category",
            "maxLength": 100,
            "example": "Electronics"
          },
          "parent_id": {
            "type": "string",
            "nullable": true,
            "description": "Public ID of the parent category. Null for root categories.",
            "example": "CAT-0002"
          },
          "path": {
            "type": "string",
            "nullable": true,
            "description": "Hierarchical path showing the category's position in the tree structure (auto-generated)",
            "maxLength": 500,
            "example": "/CAT-0002/CAT_abc123/"
          },
          "org_id": {
            "type": "string",
            "description": "Organization identifier this category belongs to",
            "example": "org_0001"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the category was created",
            "example": "2024-01-15T10:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the category was last updated",
            "example": "2024-01-16T14:20:00Z"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization",
            "description": "Organization details (included when 'organization' is requested in 'with' parameter)"
          },
          "parent": {
            "$ref": "#/components/schemas/Category",
            "description": "Parent category details (included when 'parent' is requested in 'with' parameter)"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            },
            "description": "Direct child categories (included when 'children' is requested in 'with' parameter)"
          },
          "children_recursive": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            },
            "description": "All nested child categories recursively (included when 'childrenRecursive' is requested in 'with' parameter)"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "Items assigned to this category (included when 'items' is requested in 'with' parameter)"
          }
        },
        "required": [
          "id",
          "name",
          "org_id",
          "created_at",
          "updated_at"
        ]
      },
      "CategoryHierarchical": {
        "type": "object",
        "description": "Category with nested children structure for hierarchical display",
        "allOf": [
          {
            "$ref": "#/components/schemas/Category"
          },
          {
            "type": "object",
            "properties": {
              "children": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategoryHierarchical"
                },
                "description": "Nested child categories with their own children included"
              }
            }
          }
        ]
      },
      "CategoryInput": {
        "type": "object",
        "description": "Input schema for creating or updating a category",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name (required, max 100 characters)",
            "maxLength": 100,
            "minLength": 1,
            "example": "Electronics"
          },
          "parent_id": {
            "type": "string",
            "nullable": true,
            "description": "Public ID of parent category. Set to null for root category.",
            "example": "CAT-0002"
          }
        },
        "required": [
          "name"
        ]
      },
      "CategoryResponse": {
        "type": "object",
        "description": "Standard API response wrapper for category data",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status indicator",
            "example": "success"
          },
          "message": {
            "type": "string",
            "description": "Human-readable response message",
            "example": "Categories retrieved successfully"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Category"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Category"
                }
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategoryHierarchical"
                }
              }
            ],
            "description": "Category data - single category, flat array, or hierarchical array depending on endpoint"
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ]
      },
      "CategoryErrorResponse": {
        "type": "object",
        "description": "Standard API error response for category operations",
        "properties": {
          "status": {
            "type": "string",
            "description": "Error status indicator",
            "example": "error"
          },
          "message": {
            "type": "string",
            "description": "Error message describing what went wrong",
            "example": "Resource not found"
          },
          "data": {
            "type": "null",
            "description": "Always null for error responses",
            "example": null
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ]
      },
      "CategoryValidationErrorResponse": {
        "type": "object",
        "description": "Validation error response for category operations",
        "properties": {
          "message": {
            "type": "string",
            "description": "General validation error message",
            "example": "The given data was invalid."
          },
          "errors": {
            "type": "object",
            "description": "Field-specific validation errors",
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Name field validation errors",
                "example": [
                  "The category name is required and cannot be empty"
                ]
              },
              "parent_id": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Parent ID field validation errors",
                "example": [
                  "The selected parent category does not exist in your organization"
                ]
              }
            }
          }
        },
        "required": [
          "message",
          "errors"
        ]
      },
      "CheckInOut": {
        "type": "object",
        "description": "A check-in/out record represents the tracking of inventory items being checked out and returned. It maintains complete audit trail of who, what, when, and where for inventory movements.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique public identifier for the check-in/out record (e.g., 'CHK-0001')",
            "example": "CHK-0001"
          },
          "quantity": {
            "type": "number",
            "format": "decimal",
            "description": "Quantity of items checked out",
            "minimum": 0.01,
            "example": 2.5
          },
          "checkout_date": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the item was checked out",
            "example": "2024-01-15T10:30:00Z"
          },
          "expected_return_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "ISO 8601 timestamp when the item is expected to be returned",
            "example": "2024-01-22T10:30:00Z"
          },
          "checkin_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "ISO 8601 timestamp when the item was checked in (null if still checked out)",
            "example": "2024-01-20T14:30:00Z"
          },
          "checkin_quantity": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "description": "Quantity of items checked in (null if not checked in yet)",
            "minimum": 0.01,
            "example": 2.5
          },
          "duration_days": {
            "type": "integer",
            "nullable": true,
            "description": "Number of days between checkout and checkin (null if not checked in yet)",
            "example": 5
          },
          "reference": {
            "type": "string",
            "nullable": true,
            "description": "Optional reference number for tracking purposes",
            "maxLength": 255,
            "example": "REF-001"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Optional notes about the checkout/checkin",
            "maxLength": 1000,
            "example": "Checkout for project Alpha"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether this checkout is currently active",
            "example": true
          },
          "is_checked_out": {
            "type": "boolean",
            "description": "Whether the item is currently checked out (computed field)",
            "example": true
          },
          "is_checked_in": {
            "type": "boolean",
            "description": "Whether the item has been checked in (computed field)",
            "example": false
          },
          "is_overdue": {
            "type": "boolean",
            "description": "Whether the item is overdue for return (computed field)",
            "example": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the record was created",
            "example": "2024-01-15T10:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the record was last updated",
            "example": "2024-01-20T14:30:00Z"
          },
          "user": {
            "type": "object",
            "nullable": true,
            "description": "User who checked out the item (included when 'user' is requested in 'with' parameter)",
            "properties": {
              "id": {
                "type": "string",
                "example": "USR-0001"
              },
              "name": {
                "type": "string",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "example": "john.doe@example.com"
              }
            }
          },
          "checkin_user": {
            "type": "object",
            "nullable": true,
            "description": "User who checked in the item (included when 'checkinUser' is requested in 'with' parameter)",
            "properties": {
              "id": {
                "type": "string",
                "example": "USR-0002"
              },
              "name": {
                "type": "string",
                "example": "Jane Smith"
              },
              "email": {
                "type": "string",
                "example": "jane.smith@example.com"
              }
            }
          },
          "trackable": {
            "type": "object",
            "nullable": true,
            "description": "The item being tracked (included when 'trackable' is requested in 'with' parameter)",
            "properties": {
              "id": {
                "type": "string",
                "example": "IL-0001"
              },
              "type": {
                "type": "string",
                "example": "ItemLocation"
              },
              "item": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "ITM-0001"
                  },
                  "name": {
                    "type": "string",
                    "example": "Laptop Dell XPS 13"
                  },
                  "code": {
                    "type": "string",
                    "example": "LAPTOP-001"
                  }
                }
              },
              "location": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "LOC-0001"
                  },
                  "name": {
                    "type": "string",
                    "example": "Main Warehouse"
                  },
                  "code": {
                    "type": "string",
                    "example": "WH-001"
                  }
                }
              },
              "quantity": {
                "type": "number",
                "format": "decimal",
                "example": 10
              }
            }
          },
          "checkout_location": {
            "type": "object",
            "nullable": true,
            "description": "Location where the item was checked out from (included when 'checkoutLocation' is requested in 'with' parameter)",
            "properties": {
              "id": {
                "type": "string",
                "example": "LOC-0001"
              },
              "name": {
                "type": "string",
                "example": "Main Warehouse"
              },
              "code": {
                "type": "string",
                "example": "WH-001"
              }
            }
          },
          "checkin_location": {
            "type": "object",
            "nullable": true,
            "description": "Location where the item was checked in to (included when 'checkinLocation' is requested in 'with' parameter)",
            "properties": {
              "id": {
                "type": "string",
                "example": "LOC-0002"
              },
              "name": {
                "type": "string",
                "example": "Secondary Warehouse"
              },
              "code": {
                "type": "string",
                "example": "WH-002"
              }
            }
          },
          "status_out": {
            "type": "object",
            "nullable": true,
            "description": "Status when checked out (included when 'statusOut' is requested in 'with' parameter)",
            "properties": {
              "id": {
                "type": "string",
                "example": "STS-0001"
              },
              "name": {
                "type": "string",
                "example": "In Use"
              },
              "color": {
                "type": "string",
                "example": "#ff6b35"
              }
            }
          },
          "status_in": {
            "type": "object",
            "nullable": true,
            "description": "Status when checked in (included when 'statusIn' is requested in 'with' parameter)",
            "properties": {
              "id": {
                "type": "string",
                "example": "STS-0002"
              },
              "name": {
                "type": "string",
                "example": "Available"
              },
              "color": {
                "type": "string",
                "example": "#28a745"
              }
            }
          },
          "attachments": {
            "type": "array",
            "description": "File attachments related to this check-in/out (included when 'attachments' is requested in 'with' parameter)",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "ATT-0001"
                },
                "name": {
                  "type": "string",
                  "example": "checkout_receipt.pdf"
                },
                "url": {
                  "type": "string",
                  "example": "https://example.com/files/checkout_receipt.pdf"
                },
                "size": {
                  "type": "integer",
                  "example": 102400
                }
              }
            }
          }
        },
        "required": [
          "id",
          "quantity",
          "checkout_date",
          "is_active",
          "is_checked_out",
          "is_checked_in",
          "is_overdue",
          "created_at",
          "updated_at"
        ]
      },
      "CheckInOutInput": {
        "type": "object",
        "description": "Input schema for creating or updating a check-in/out record",
        "properties": {
          "user_id": {
            "type": "string",
            "nullable": true,
            "description": "User ID who is checking out the item",
            "example": "USR-0001"
          },
          "trackable_id": {
            "type": "string",
            "nullable": true,
            "description": "ID of the trackable item (usually ItemLocation ID)",
            "example": "IL-0001"
          },
          "trackable_type": {
            "type": "string",
            "nullable": true,
            "description": "Type of the trackable item",
            "enum": [
              "App\\Models\\ItemLocation",
              "App\\Models\\Item"
            ],
            "example": "App\\Models\\ItemLocation"
          },
          "checkout_location_id": {
            "type": "string",
            "nullable": true,
            "description": "Location ID where the item is being checked out from",
            "example": "LOC-0001"
          },
          "checkout_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Checkout date (ISO 8601 format)",
            "example": "2024-01-15T10:30:00Z"
          },
          "quantity": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "description": "Quantity to check out",
            "minimum": 0.01,
            "example": 2.5
          },
          "status_out_id": {
            "type": "string",
            "nullable": true,
            "description": "Status ID for checkout",
            "example": "STS-0001"
          },
          "checkin_user_id": {
            "type": "string",
            "nullable": true,
            "description": "User ID who is checking in the item",
            "example": "USR-0002"
          },
          "checkin_location_id": {
            "type": "string",
            "nullable": true,
            "description": "Location ID where the item is being checked in to",
            "example": "LOC-0002"
          },
          "checkin_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Check-in date (ISO 8601 format)",
            "example": "2024-01-20T14:30:00Z"
          },
          "checkin_quantity": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "description": "Quantity to check in",
            "minimum": 0.01,
            "example": 2.5
          },
          "status_in_id": {
            "type": "string",
            "nullable": true,
            "description": "Status ID for check-in",
            "example": "STS-0002"
          },
          "expected_return_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Expected return date (ISO 8601 format)",
            "example": "2024-01-22T10:30:00Z"
          },
          "reference": {
            "type": "string",
            "nullable": true,
            "description": "Optional reference number",
            "maxLength": 255,
            "example": "REF-001"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Optional notes",
            "maxLength": 1000,
            "example": "Checkout for project Alpha"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether this checkout is active",
            "example": true
          }
        }
      },
      "CheckoutInput": {
        "type": "object",
        "description": "Input schema for checking out an item",
        "properties": {
          "quantity": {
            "type": "number",
            "format": "decimal",
            "description": "Quantity to check out (required)",
            "minimum": 0.01,
            "example": 2.5
          },
          "expected_return_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Expected return date (ISO 8601 format, must be in the future)",
            "example": "2024-01-22T10:30:00Z"
          },
          "reference": {
            "type": "string",
            "nullable": true,
            "description": "Optional reference number",
            "maxLength": 255,
            "example": "REF-001"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Optional notes",
            "maxLength": 1000,
            "example": "Checkout for project Alpha"
          },
          "status_out_id": {
            "type": "string",
            "nullable": true,
            "description": "Status ID for checkout",
            "example": "STS-0001"
          }
        },
        "required": [
          "quantity"
        ]
      },
      "CheckinInput": {
        "type": "object",
        "description": "Input schema for checking in an item",
        "properties": {
          "checkin_quantity": {
            "type": "number",
            "format": "decimal",
            "description": "Quantity to check in (required)",
            "minimum": 0.01,
            "example": 2.5
          },
          "checkin_location_id": {
            "type": "string",
            "nullable": true,
            "description": "Location ID where the item is being checked in to",
            "example": "LOC-0002"
          },
          "reference": {
            "type": "string",
            "nullable": true,
            "description": "Optional reference number",
            "maxLength": 255,
            "example": "REF-001"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Optional notes",
            "maxLength": 1000,
            "example": "Returned from project Alpha"
          },
          "status_in_id": {
            "type": "string",
            "nullable": true,
            "description": "Status ID for check-in",
            "example": "STS-0002"
          }
        },
        "required": [
          "checkin_quantity"
        ]
      },
      "AvailabilityData": {
        "type": "object",
        "description": "Availability information for an item location",
        "properties": {
          "total_quantity": {
            "type": "number",
            "format": "decimal",
            "description": "Total quantity available at this location",
            "example": 10
          },
          "checked_out_quantity": {
            "type": "number",
            "format": "decimal",
            "description": "Quantity currently checked out",
            "example": 3
          },
          "available_quantity": {
            "type": "number",
            "format": "decimal",
            "description": "Quantity available for checkout",
            "example": 7
          },
          "availability_status": {
            "type": "string",
            "description": "Overall availability status",
            "enum": [
              "available",
              "partially_available",
              "unavailable"
            ],
            "example": "partially_available"
          }
        },
        "required": [
          "total_quantity",
          "checked_out_quantity",
          "available_quantity",
          "availability_status"
        ]
      },
      "CheckInOutResponse": {
        "type": "object",
        "description": "Standard API response wrapper for check-in/out data",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status indicator",
            "example": "success"
          },
          "message": {
            "type": "string",
            "description": "Human-readable response message",
            "example": "Check-in/out records retrieved successfully"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CheckInOut"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CheckInOut"
                }
              }
            ],
            "description": "Check-in/out data - single record or array depending on endpoint"
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ]
      },
      "CheckInOutErrorResponse": {
        "type": "object",
        "description": "Standard API error response for check-in/out operations",
        "properties": {
          "status": {
            "type": "string",
            "description": "Error status indicator",
            "example": "error"
          },
          "message": {
            "type": "string",
            "description": "Error message describing what went wrong",
            "example": "Resource not found"
          },
          "data": {
            "type": "null",
            "description": "Always null for error responses",
            "example": null
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ]
      },
      "CheckInOutValidationErrorResponse": {
        "type": "object",
        "description": "Validation error response for check-in/out operations",
        "properties": {
          "message": {
            "type": "string",
            "description": "General validation error message",
            "example": "The given data was invalid."
          },
          "errors": {
            "type": "object",
            "description": "Field-specific validation errors",
            "properties": {
              "quantity": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Quantity field validation errors",
                "example": [
                  "Quantity must be greater than 0"
                ]
              },
              "checkin_quantity": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Check-in quantity field validation errors",
                "example": [
                  "Check-in quantity must be greater than 0"
                ]
              },
              "expected_return_date": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Expected return date field validation errors",
                "example": [
                  "Expected return date must be in the future"
                ]
              },
              "status_out_id": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Checkout status field validation errors",
                "example": [
                  "Selected checkout status does not exist"
                ]
              },
              "status_in_id": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Check-in status field validation errors",
                "example": [
                  "Selected checkin status does not exist"
                ]
              },
              "checkin_location_id": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Check-in location field validation errors",
                "example": [
                  "Selected checkin location does not exist"
                ]
              }
            }
          }
        },
        "required": [
          "message",
          "errors"
        ]
      },
      "ItemLocation": {
        "type": "object",
        "description": "An item location represents the assignment of a specific quantity of an item to a particular location. This enables tracking of item distribution across multiple storage locations.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique public identifier for the item location (e.g., 'IL-0001')",
            "example": "IL-0001"
          },
          "quantity": {
            "type": "number",
            "format": "decimal",
            "description": "Quantity of the item stored at this location",
            "minimum": 0,
            "example": 25.5
          },
          "moved_date": {
            "type": "string",
            "format": "date",
            "description": "Date when the item was moved to this location (ISO 8601 date format)",
            "nullable": true,
            "example": "2024-01-15"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes about this item location assignment",
            "nullable": true,
            "maxLength": 65535,
            "example": "Items stored on shelf B3, handle with care"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the item location was created",
            "example": "2024-01-15T10:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the item location was last updated",
            "example": "2024-01-16T14:20:00Z"
          },
          "organization": {
            "type": "object",
            "description": "Organization information",
            "properties": {
              "id": {
                "type": "string",
                "description": "Organization identifier",
                "example": "org_xyz789"
              },
              "name": {
                "type": "string",
                "description": "Organization name",
                "example": "ACME Corporation"
              }
            }
          },
          "item": {
            "$ref": "#/components/schemas/Item",
            "description": "Item details (included when 'item' is requested in 'with' parameter)"
          },
          "location": {
            "$ref": "#/components/schemas/Location",
            "description": "Location details (included when 'location' is requested in 'with' parameter)"
          }
        },
        "required": [
          "id",
          "quantity",
          "created_at",
          "updated_at",
          "organization"
        ]
      },
      "ItemLocationInput": {
        "type": "object",
        "description": "Input schema for creating or updating an item location",
        "properties": {
          "org_id": {
            "type": "string",
            "description": "Organization ID (required)",
            "example": "org_xyz789"
          },
          "item_id": {
            "type": "string",
            "description": "Item ID that will be assigned to the location (required)",
            "example": "ITM-0001"
          },
          "location_id": {
            "type": "string",
            "description": "Location ID where the item will be stored (required)",
            "example": "LOC-0001"
          },
          "quantity": {
            "type": "number",
            "format": "decimal",
            "description": "Quantity of the item to assign to this location (required, must be >= 0)",
            "minimum": 0,
            "example": 25.5
          },
          "moved_date": {
            "type": "string",
            "format": "date",
            "description": "Date when the item was moved to this location (optional, YYYY-MM-DD format)",
            "nullable": true,
            "example": "2024-01-15"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes about this item location assignment (optional, max 65535 characters)",
            "nullable": true,
            "maxLength": 65535,
            "example": "Items stored on shelf B3, handle with care"
          }
        },
        "required": [
          "org_id",
          "item_id",
          "location_id",
          "quantity"
        ]
      },
      "ItemMoveRequest": {
        "type": "object",
        "description": "Input schema for moving items between locations",
        "properties": {
          "org_id": {
            "type": "string",
            "description": "Organization ID (required)",
            "example": "org_xyz789"
          },
          "item_id": {
            "type": "string",
            "description": "Item ID to move (required)",
            "example": "ITM-0001"
          },
          "from_location_id": {
            "type": "string",
            "description": "Source location ID (required)",
            "example": "LOC-0001"
          },
          "to_location_id": {
            "type": "string",
            "description": "Destination location ID (required, must be different from source)",
            "example": "LOC-0002"
          },
          "quantity": {
            "type": "number",
            "format": "decimal",
            "description": "Quantity to move (required, must be >= 0 and <= available quantity)",
            "minimum": 0,
            "example": 10
          },
          "moved_date": {
            "type": "string",
            "format": "date",
            "description": "Date of the move operation (optional, YYYY-MM-DD format)",
            "nullable": true,
            "example": "2024-01-16"
          },
          "notes": {
            "type": "string",
            "description": "Notes about the move operation (optional, max 65535 characters)",
            "nullable": true,
            "maxLength": 65535,
            "example": "Moved for maintenance purposes"
          }
        },
        "required": [
          "org_id",
          "item_id",
          "from_location_id",
          "to_location_id",
          "quantity"
        ]
      },
      "ItemLocationResponse": {
        "type": "object",
        "description": "Standard API response wrapper for item location data",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status indicator",
            "example": "success"
          },
          "message": {
            "type": "string",
            "description": "Human-readable response message",
            "example": "Item locations retrieved successfully"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ItemLocation"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemLocation"
                }
              }
            ],
            "description": "Item location data - single item location or array of item locations"
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ]
      },
      "ItemLocationErrorResponse": {
        "type": "object",
        "description": "Standard API error response for item location operations",
        "properties": {
          "status": {
            "type": "string",
            "description": "Error status indicator",
            "example": "error"
          },
          "message": {
            "type": "string",
            "description": "Error message describing what went wrong",
            "example": "Resource not found"
          },
          "data": {
            "type": "null",
            "description": "Always null for error responses",
            "example": null
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ]
      },
      "ItemLocationValidationErrorResponse": {
        "type": "object",
        "description": "Validation error response for item location operations",
        "properties": {
          "message": {
            "type": "string",
            "description": "General validation error message",
            "example": "The given data was invalid."
          },
          "errors": {
            "type": "object",
            "description": "Field-specific validation errors",
            "properties": {
              "item_id": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Item ID field validation errors",
                "example": [
                  "The selected item is invalid"
                ]
              },
              "location_id": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Location ID field validation errors",
                "example": [
                  "This item is already assigned to this location for the organization"
                ]
              },
              "quantity": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Quantity field validation errors",
                "example": [
                  "The quantity cannot be negative"
                ]
              },
              "from_location_id": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Source location field validation errors (for move operations)",
                "example": [
                  "The selected source location is invalid"
                ]
              },
              "to_location_id": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Destination location field validation errors (for move operations)",
                "example": [
                  "The destination location must be different from the source location"
                ]
              }
            }
          }
        },
        "required": [
          "message",
          "errors"
        ]
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ITM-1234"
          },
          "name": {
            "type": "string",
            "example": "HP Laptop"
          },
          "code": {
            "type": "string",
            "example": "LPT-001"
          },
          "barcode": {
            "type": "string",
            "example": "1234567890"
          },
          "type": {
            "type": "string",
            "enum": [
              "abstract",
              "bulk",
              "serialized"
            ],
            "example": "serialized",
            "description": "Alias for tracking_mode, indicates how the item is tracked"
          },
          "description": {
            "type": "string",
            "example": "HP ProBook 450 G8 Business Laptop"
          },
          "tracking_mode": {
            "type": "string",
            "enum": [
              "abstract",
              "bulk",
              "serialized"
            ],
            "example": "serialized",
            "description": "Abstract: No tracking, Bulk: Track by quantity, Serialized: Track individual items"
          },
          "price": {
            "type": "number",
            "format": "float",
            "example": 999.99
          },
          "serial_number": {
            "type": "string",
            "example": "SN12345678",
            "description": "Required for serialized items"
          },
          "notes": {
            "type": "string",
            "example": "Purchased for marketing department"
          },
          "specifications": {
            "type": "object",
            "example": {
              "cpu": "Intel Core i7",
              "ram": "16GB",
              "storage": "512GB SSD"
            }
          },
          "org_id": {
            "type": "integer",
            "example": 1
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          },
          "in_maintenance": {
            "type": "boolean",
            "example": false,
            "description": "Whether the item is currently in maintenance"
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "total_quantity": {
            "type": "integer",
            "example": 10,
            "description": "Sum of quantities across all locations"
          },
          "supplier_count": {
            "type": "integer",
            "example": 2,
            "description": "Number of suppliers for this item"
          },
          "organization": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "ORG-123"
              },
              "name": {
                "type": "string",
                "example": "Acme Inc."
              }
            }
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "CAT-123"
              },
              "name": {
                "type": "string",
                "example": "Electronics"
              }
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "STS-123"
              },
              "name": {
                "type": "string",
                "example": "Available"
              }
            }
          },
          "unit_of_measure": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Each"
              },
              "symbol": {
                "type": "string",
                "example": "ea"
              }
            }
          },
          "suppliers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "SUP-123"
                },
                "name": {
                  "type": "string",
                  "example": "HP Distributors"
                },
                "is_preferred": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "LOC-123"
                },
                "name": {
                  "type": "string",
                  "example": "Main Warehouse"
                },
                "code": {
                  "type": "string",
                  "example": "WH-001"
                },
                "quantity": {
                  "type": "integer",
                  "example": 5
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2025-06-16T10:00:00Z"
                }
              }
            }
          }
        }
      },
      "ItemCollection": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "message": {
            "type": "string",
            "example": "Resources retrieved successfully"
          }
        }
      },
      "ItemSingle": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/Item"
          },
          "message": {
            "type": "string",
            "example": "Resource retrieved successfully"
          }
        }
      },
      "ItemRequest": {
        "type": "object",
        "required": [
          "name",
          "code",
          "tracking_mode",
          "unit_id",
          "org_id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "HP Laptop",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "example": "LPT-001",
            "maxLength": 50
          },
          "barcode": {
            "type": "string",
            "example": "1234567890",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "example": "HP ProBook 450 G8 Business Laptop",
            "maxLength": 1000
          },
          "tracking_mode": {
            "type": "string",
            "enum": [
              "abstract",
              "bulk",
              "serialized"
            ],
            "example": "serialized"
          },
          "unit_id": {
            "type": "integer",
            "example": 1
          },
          "price": {
            "type": "number",
            "format": "float",
            "example": 999.99,
            "minimum": 0,
            "maximum": 999999.99
          },
          "serial_number": {
            "type": "string",
            "example": "SN12345678",
            "maxLength": 255
          },
          "category_id": {
            "type": "integer",
            "example": 1
          },
          "status_id": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "specifications": {
            "type": "object",
            "example": {
              "cpu": "Intel Core i7",
              "ram": "16GB",
              "storage": "512GB SSD"
            }
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "org_id": {
            "type": "integer",
            "example": 1
          },
          "parent_item_id": {
            "type": "integer",
            "example": 10
          },
          "item_relation_id": {
            "type": "integer",
            "example": 20
          },
          "notes": {
            "type": "string",
            "example": "Purchased for marketing department",
            "maxLength": 1000
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "LOC-123"
                },
                "quantity": {
                  "type": "integer",
                  "example": 5,
                  "minimum": 0
                }
              }
            }
          }
        }
      },
      "MaintenanceRequest": {
        "type": "object",
        "required": [
          "action"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "example": "in",
            "description": "'in' sends item to maintenance, 'out' returns it from maintenance"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z",
            "description": "Date of the maintenance action. Defaults to current timestamp if not provided."
          },
          "remarks": {
            "type": "string",
            "example": "Display screen flickering",
            "description": "Notes about the maintenance operation"
          },
          "is_repair": {
            "type": "boolean",
            "example": true,
            "description": "Whether this maintenance is a repair. Defaults to false if not provided.",
            "default": false
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Resource not found"
          },
          "errors": {
            "type": "object",
            "example": {
              "email": [
                "The email has already been taken."
              ],
              "password": [
                "The password confirmation does not match."
              ]
            }
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique location identifier",
            "example": "loc_abc123"
          },
          "name": {
            "type": "string",
            "description": "Location name",
            "example": "Main Warehouse"
          },
          "code": {
            "type": "string",
            "description": "Location code for easy identification and sorting",
            "example": "WH-MAIN"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Detailed location description",
            "example": "Primary storage facility for all products and components"
          },
          "path": {
            "type": "string",
            "description": "Hierarchical path showing the location's position in the tree structure",
            "example": "/loc_abc123/loc_def456/"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the location is currently active and available for use",
            "example": true
          },
          "parent_id": {
            "type": "string",
            "nullable": true,
            "description": "Parent location ID (null for root/top-level locations)",
            "example": "loc_parent123"
          },
          "organization": {
            "type": "object",
            "description": "Organization this location belongs to",
            "properties": {
              "id": {
                "type": "string",
                "example": "org_xyz789"
              },
              "name": {
                "type": "string",
                "example": "ACME Corporation"
              }
            }
          },
          "parent": {
            "type": "object",
            "nullable": true,
            "description": "Parent location details (null for root locations)",
            "properties": {
              "id": {
                "type": "string",
                "example": "loc_parent123"
              },
              "name": {
                "type": "string",
                "example": "Main Building"
              },
              "code": {
                "type": "string",
                "example": "MB-01"
              },
              "path": {
                "type": "string",
                "example": "/loc_parent123/"
              }
            }
          },
          "children": {
            "type": "array",
            "description": "Direct child locations (first level only)",
            "items": {
              "$ref": "#/components/schemas/LocationSummary"
            }
          },
          "childrenRecursive": {
            "type": "array",
            "description": "All nested child locations recursively (complete hierarchy)",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "items": {
            "type": "array",
            "description": "Items stored in this location (when included with ?with=items)",
            "items": {
              "$ref": "#/components/schemas/ItemSummary"
            }
          },
          "items_count": {
            "type": "integer",
            "description": "Total number of items stored in this location",
            "example": 45
          },
          "attachments": {
            "type": "array",
            "description": "Files and documents attached to this location",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Location creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "path",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "LocationWithHierarchy": {
        "type": "object",
        "description": "Location with complete hierarchical children structure",
        "allOf": [
          {
            "$ref": "#/components/schemas/Location"
          },
          {
            "type": "object",
            "properties": {
              "childrenRecursive": {
                "type": "array",
                "description": "Complete nested hierarchy of all child locations",
                "items": {
                  "$ref": "#/components/schemas/LocationWithHierarchy"
                }
              }
            }
          }
        ]
      },
      "LocationCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Location name (must be unique within the organization)",
            "minLength": 1,
            "maxLength": 255,
            "example": "Main Warehouse"
          },
          "code": {
            "type": "string",
            "description": "Location code for identification (must be unique within the organization)",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[A-Z0-9_-]+$",
            "example": "WH-MAIN"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional detailed description of the location",
            "maxLength": 1000,
            "example": "Primary storage facility for all products and electronic components"
          },
          "parent_id": {
            "type": "string",
            "nullable": true,
            "description": "Parent location ID (null for root/top-level locations). Must be an existing location ID.",
            "example": "loc_parent123"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the location should be active upon creation",
            "default": true,
            "example": true
          }
        },
        "required": [
          "name",
          "code"
        ],
        "example": {
          "name": "Electronics Section",
          "code": "WH-MAIN-ELEC",
          "description": "Dedicated area for electronic components and devices",
          "parent_id": "loc_abc123",
          "is_active": true
        }
      },
      "LocationUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated location name (must be unique within the organization)",
            "minLength": 1,
            "maxLength": 255,
            "example": "Renovated Main Warehouse"
          },
          "code": {
            "type": "string",
            "description": "Updated location code (must be unique within the organization)",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[A-Z0-9_-]+$",
            "example": "WH-MAIN-RENOVATED"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Updated location description",
            "maxLength": 1000,
            "example": "Newly renovated and expanded primary storage facility"
          },
          "parent_id": {
            "type": "string",
            "nullable": true,
            "description": "New parent location ID (null to make it a root location). Changing this will recalculate the hierarchical path.",
            "example": "loc_new_parent456"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the location should be active. Deactivating a location may affect item accessibility.",
            "example": true
          }
        },
        "example": {
          "name": "Expanded Electronics Warehouse",
          "description": "Newly expanded warehouse dedicated to electronic components",
          "is_active": true
        }
      },
      "LocationSummary": {
        "type": "object",
        "description": "Simplified location information for references and listings",
        "properties": {
          "id": {
            "type": "string",
            "description": "Location identifier",
            "example": "loc_abc123"
          },
          "name": {
            "type": "string",
            "description": "Location name",
            "example": "Main Warehouse"
          },
          "code": {
            "type": "string",
            "description": "Location code",
            "example": "WH-MAIN"
          },
          "path": {
            "type": "string",
            "description": "Hierarchical path",
            "example": "/loc_abc123/"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the location is active",
            "example": true
          },
          "items_count": {
            "type": "integer",
            "description": "Number of items in this location",
            "example": 25
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "path",
          "is_active"
        ]
      },
      "LocationHierarchyFlat": {
        "type": "object",
        "description": "Flattened location data without nested children",
        "properties": {
          "id": {
            "type": "string",
            "description": "Location identifier",
            "example": "loc_abc123"
          },
          "name": {
            "type": "string",
            "description": "Location name",
            "example": "Main Warehouse"
          },
          "code": {
            "type": "string",
            "description": "Location code",
            "example": "WH-MAIN"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Location description",
            "example": "Primary storage facility"
          },
          "path": {
            "type": "string",
            "description": "Hierarchical path",
            "example": "/loc_abc123/"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the location is active",
            "example": true
          },
          "parent_id": {
            "type": "string",
            "nullable": true,
            "description": "Parent location ID",
            "example": "loc_parent123"
          },
          "level": {
            "type": "integer",
            "description": "Hierarchy level (0 for root, 1 for first level children, etc.)",
            "example": 1
          },
          "items_count": {
            "type": "integer",
            "description": "Number of items in this location",
            "example": 45
          },
          "children_count": {
            "type": "integer",
            "description": "Number of direct child locations",
            "example": 3
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "path",
          "is_active",
          "level",
          "items_count",
          "children_count"
        ]
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ORG-123"
          },
          "name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "contact@acme.com"
          },
          "telephone": {
            "type": "string",
            "example": "+1-555-123-4567"
          },
          "address": {
            "type": "string",
            "example": "123 Corporate Drive, Business City"
          },
          "website": {
            "type": "string",
            "format": "uri",
            "example": "https://www.acme.com"
          },
          "remarks": {
            "type": "string",
            "example": "Main corporate headquarters"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          }
        }
      },
      "OrganizationCollection": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "message": {
            "type": "string",
            "example": "Resources retrieved successfully"
          }
        }
      },
      "OrganizationSingle": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/Organization"
          },
          "message": {
            "type": "string",
            "example": "Resource retrieved successfully"
          }
        }
      },
      "OrganizationRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Acme Corporation",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "contact@acme.com",
            "maxLength": 255
          },
          "telephone": {
            "type": "string",
            "example": "+1-555-123-4567",
            "maxLength": 50
          },
          "address": {
            "type": "string",
            "example": "123 Corporate Drive, Business City",
            "maxLength": 255
          },
          "website": {
            "type": "string",
            "format": "uri",
            "example": "https://www.acme.com",
            "maxLength": 255
          },
          "remarks": {
            "type": "string",
            "example": "Main corporate headquarters"
          }
        }
      },
      "Supplier": {
        "type": "object",
        "description": "A supplier represents a vendor or source from which items can be purchased. Suppliers maintain contact information, business details, and can be linked to specific items with pricing and lead time information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique public identifier for the supplier (e.g., 'SUP-0001')",
            "example": "SUP-0001"
          },
          "name": {
            "type": "string",
            "description": "Supplier company name (required)",
            "maxLength": 255,
            "example": "Tech Components Ltd"
          },
          "code": {
            "type": "string",
            "description": "Unique supplier code within the organization (optional)",
            "maxLength": 50,
            "nullable": true,
            "example": "TCL-001"
          },
          "contact_name": {
            "type": "string",
            "description": "Primary contact person name (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "John Smith"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Supplier email address (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "contact@techcomponents.com"
          },
          "phone": {
            "type": "string",
            "description": "Supplier phone number (optional)",
            "maxLength": 50,
            "nullable": true,
            "example": "+1-555-123-4567"
          },
          "address": {
            "type": "string",
            "description": "Street address (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "123 Industrial Blvd"
          },
          "city": {
            "type": "string",
            "description": "City (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "San Francisco"
          },
          "state": {
            "type": "string",
            "description": "State or province (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "CA"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal or zip code (optional)",
            "maxLength": 20,
            "nullable": true,
            "example": "94105"
          },
          "country": {
            "type": "string",
            "description": "Country (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "United States"
          },
          "website": {
            "type": "string",
            "format": "url",
            "description": "Supplier website URL (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "https://www.techcomponents.com"
          },
          "tax_id": {
            "type": "string",
            "description": "Tax identification number (optional)",
            "maxLength": 50,
            "nullable": true,
            "example": "123-45-6789"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes about the supplier (optional)",
            "nullable": true,
            "example": "Preferred supplier for electronic components. Good lead times and competitive pricing."
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the supplier is currently active",
            "default": true,
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the supplier was created",
            "example": "2024-01-15T10:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the supplier was last updated",
            "example": "2024-01-16T14:20:00Z"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization",
            "description": "Organization details (included when 'organization' is requested in 'with' parameter)"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "Items supplied by this supplier (included when 'items' is requested in 'with' parameter)"
          },
          "item_suppliers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemSupplier"
            },
            "description": "Item-supplier relationships with pricing details (included when 'itemSuppliers' is requested in 'with' parameter)"
          }
        },
        "required": [
          "id",
          "name",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "ItemSupplier": {
        "type": "object",
        "description": "An item-supplier relationship represents the association between a specific item and supplier, including pricing, lead time, and preference information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique public identifier for the item-supplier relationship",
            "example": "IS-0001"
          },
          "org_id": {
            "type": "string",
            "description": "Organization identifier",
            "example": "org_xyz789"
          },
          "item_id": {
            "type": "string",
            "description": "Item identifier",
            "example": "ITM-0001"
          },
          "supplier_id": {
            "type": "string",
            "description": "Supplier identifier",
            "example": "SUP-0001"
          },
          "supplier_part_number": {
            "type": "string",
            "description": "Supplier's part number for this item (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "TCL-LAP-2024-001"
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "description": "Price per unit from this supplier (optional)",
            "minimum": 0,
            "nullable": true,
            "example": 1250
          },
          "currency": {
            "type": "string",
            "description": "Currency code (3 characters, ISO 4217)",
            "minLength": 3,
            "maxLength": 3,
            "default": "USD",
            "example": "USD"
          },
          "lead_time_days": {
            "type": "integer",
            "description": "Lead time in days for delivery (optional)",
            "minimum": 0,
            "nullable": true,
            "example": 14
          },
          "is_preferred": {
            "type": "boolean",
            "description": "Whether this is the preferred supplier for this item",
            "default": false,
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the relationship was created",
            "example": "2024-01-15T10:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the relationship was last updated",
            "example": "2024-01-16T14:20:00Z"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization",
            "description": "Organization details (included when 'organization' is requested in 'with' parameter)"
          },
          "item": {
            "$ref": "#/components/schemas/Item",
            "description": "Item details (included when 'item' is requested in 'with' parameter)"
          },
          "supplier": {
            "$ref": "#/components/schemas/Supplier",
            "description": "Supplier details (included when 'supplier' is requested in 'with' parameter)"
          }
        },
        "required": [
          "id",
          "org_id",
          "item_id",
          "supplier_id",
          "currency",
          "is_preferred",
          "created_at",
          "updated_at"
        ]
      },
      "SupplierInput": {
        "type": "object",
        "description": "Input schema for creating or updating a supplier",
        "properties": {
          "name": {
            "type": "string",
            "description": "Supplier company name (required)",
            "maxLength": 255,
            "minLength": 1,
            "example": "Tech Components Ltd"
          },
          "code": {
            "type": "string",
            "description": "Unique supplier code within the organization (optional)",
            "maxLength": 50,
            "nullable": true,
            "example": "TCL-001"
          },
          "contact_name": {
            "type": "string",
            "description": "Primary contact person name (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "John Smith"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Supplier email address (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "contact@techcomponents.com"
          },
          "phone": {
            "type": "string",
            "description": "Supplier phone number (optional)",
            "maxLength": 50,
            "nullable": true,
            "example": "+1-555-123-4567"
          },
          "address": {
            "type": "string",
            "description": "Street address (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "123 Industrial Blvd"
          },
          "city": {
            "type": "string",
            "description": "City (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "San Francisco"
          },
          "state": {
            "type": "string",
            "description": "State or province (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "CA"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal or zip code (optional)",
            "maxLength": 20,
            "nullable": true,
            "example": "94105"
          },
          "country": {
            "type": "string",
            "description": "Country (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "United States"
          },
          "website": {
            "type": "string",
            "format": "url",
            "description": "Supplier website URL (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "https://www.techcomponents.com"
          },
          "tax_id": {
            "type": "string",
            "description": "Tax identification number (optional)",
            "maxLength": 50,
            "nullable": true,
            "example": "123-45-6789"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes about the supplier (optional)",
            "nullable": true,
            "example": "Preferred supplier for electronic components"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the supplier is currently active (optional, defaults to true)",
            "default": true,
            "example": true
          },
          "org_id": {
            "type": "string",
            "description": "Organization ID (optional, inferred from authenticated user)",
            "nullable": true,
            "example": "org_xyz789"
          }
        },
        "required": [
          "name"
        ]
      },
      "ItemSupplierInput": {
        "type": "object",
        "description": "Input schema for creating or updating item-supplier relationships",
        "properties": {
          "item_id": {
            "type": "string",
            "description": "Item ID (required)",
            "example": "ITM-0001"
          },
          "supplier_id": {
            "type": "string",
            "description": "Supplier ID (required)",
            "example": "SUP-0001"
          },
          "supplier_part_number": {
            "type": "string",
            "description": "Supplier's part number for this item (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "TCL-LAP-2024-001"
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "description": "Price per unit from this supplier (optional, must be >= 0)",
            "minimum": 0,
            "nullable": true,
            "example": 1250
          },
          "currency": {
            "type": "string",
            "description": "Currency code (optional, defaults to USD, must be exactly 3 characters)",
            "minLength": 3,
            "maxLength": 3,
            "nullable": true,
            "example": "USD"
          },
          "lead_time_days": {
            "type": "integer",
            "description": "Lead time in days for delivery (optional, must be >= 0)",
            "minimum": 0,
            "nullable": true,
            "example": 14
          },
          "is_preferred": {
            "type": "boolean",
            "description": "Whether this is the preferred supplier for this item (optional, defaults to false)",
            "default": false,
            "example": true
          }
        },
        "required": [
          "item_id",
          "supplier_id"
        ]
      },
      "SupplierErrorResponse": {
        "type": "object",
        "description": "Standard API error response for supplier operations",
        "properties": {
          "status": {
            "type": "string",
            "description": "Error status indicator",
            "example": "error"
          },
          "message": {
            "type": "string",
            "description": "Error message describing what went wrong",
            "example": "Resource not found"
          },
          "data": {
            "type": "null",
            "description": "Always null for error responses",
            "example": null
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ]
      },
      "SupplierValidationErrorResponse": {
        "type": "object",
        "description": "Validation error response for supplier operations",
        "properties": {
          "message": {
            "type": "string",
            "description": "General validation error message",
            "example": "The given data was invalid."
          },
          "errors": {
            "type": "object",
            "description": "Field-specific validation errors",
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Name field validation errors",
                "example": [
                  "The supplier name is required"
                ]
              },
              "code": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Code field validation errors",
                "example": [
                  "This supplier code is already used in your organization."
                ]
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Email field validation errors",
                "example": [
                  "Please enter a valid email address"
                ]
              },
              "website": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Website field validation errors",
                "example": [
                  "Please enter a valid website URL"
                ]
              },
              "item_id": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Item ID field validation errors (for item-supplier relationships)",
                "example": [
                  "The selected item is invalid"
                ]
              },
              "supplier_id": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Supplier ID field validation errors (for item-supplier relationships)",
                "example": [
                  "The selected supplier is invalid"
                ]
              },
              "price": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Price field validation errors",
                "example": [
                  "The price cannot be negative"
                ]
              },
              "currency": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Currency field validation errors",
                "example": [
                  "Currency code must be exactly 3 characters"
                ]
              },
              "lead_time_days": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Lead time field validation errors",
                "example": [
                  "The lead time cannot be negative"
                ]
              }
            }
          }
        },
        "required": [
          "message",
          "errors"
        ]
      },
      "SupplierCreateRequest": {
        "type": "object",
        "description": "Request payload for creating a new supplier",
        "properties": {
          "name": {
            "type": "string",
            "description": "Supplier company name (required)",
            "maxLength": 255,
            "example": "Tech Components Ltd"
          },
          "code": {
            "type": "string",
            "description": "Unique supplier code within the organization (optional)",
            "maxLength": 50,
            "nullable": true,
            "example": "TCL-001"
          },
          "contact_name": {
            "type": "string",
            "description": "Primary contact person name (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "John Smith"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Supplier email address (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "contact@techcomponents.com"
          },
          "phone": {
            "type": "string",
            "description": "Supplier phone number (optional)",
            "maxLength": 50,
            "nullable": true,
            "example": "+1-555-123-4567"
          },
          "address": {
            "type": "string",
            "description": "Street address (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "123 Tech Street"
          },
          "city": {
            "type": "string",
            "description": "City (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "State or province (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "NY"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal or ZIP code (optional)",
            "maxLength": 20,
            "nullable": true,
            "example": "10001"
          },
          "country": {
            "type": "string",
            "description": "Country (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "United States"
          },
          "website": {
            "type": "string",
            "format": "uri",
            "description": "Supplier website URL (optional)",
            "maxLength": 255,
            "nullable": true,
            "example": "https://techcomponents.com"
          },
          "tax_id": {
            "type": "string",
            "description": "Tax identification number (optional)",
            "maxLength": 50,
            "nullable": true,
            "example": "123456789"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes about the supplier (optional)",
            "nullable": true,
            "example": "Preferred supplier for electronic components"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the supplier is active",
            "example": true
          }
        },
        "required": [
          "name"
        ]
      },
      "SupplierUpdateRequest": {
        "type": "object",
        "description": "Request payload for updating an existing supplier",
        "properties": {
          "name": {
            "type": "string",
            "description": "Supplier company name",
            "maxLength": 255,
            "example": "Tech Components Ltd - Updated"
          },
          "code": {
            "type": "string",
            "description": "Unique supplier code within the organization",
            "maxLength": 50,
            "nullable": true,
            "example": "TCL-001"
          },
          "contact_name": {
            "type": "string",
            "description": "Primary contact person name",
            "maxLength": 255,
            "nullable": true,
            "example": "Jane Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Supplier email address",
            "maxLength": 255,
            "nullable": true,
            "example": "newcontact@techcomponents.com"
          },
          "phone": {
            "type": "string",
            "description": "Supplier phone number",
            "maxLength": 50,
            "nullable": true,
            "example": "+1-555-987-6543"
          },
          "address": {
            "type": "string",
            "description": "Street address",
            "maxLength": 255,
            "nullable": true,
            "example": "456 Updated Street"
          },
          "city": {
            "type": "string",
            "description": "City",
            "maxLength": 100,
            "nullable": true,
            "example": "Boston"
          },
          "state": {
            "type": "string",
            "description": "State or province",
            "maxLength": 100,
            "nullable": true,
            "example": "MA"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal or ZIP code",
            "maxLength": 20,
            "nullable": true,
            "example": "02101"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "maxLength": 100,
            "nullable": true,
            "example": "United States"
          },
          "website": {
            "type": "string",
            "format": "uri",
            "description": "Supplier website URL",
            "maxLength": 255,
            "nullable": true,
            "example": "https://updated.techcomponents.com"
          },
          "tax_id": {
            "type": "string",
            "description": "Tax identification number",
            "maxLength": 50,
            "nullable": true,
            "example": "987654321"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes about the supplier",
            "nullable": true,
            "example": "Updated supplier information"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the supplier is active",
            "example": true
          }
        }
      },
      "ItemSupplierCreateRequest": {
        "type": "object",
        "description": "Request payload for creating a new item-supplier relationship",
        "properties": {
          "type": {
            "type": "string",
            "description": "Must be 'relationship' to create item-supplier relationship",
            "enum": [
              "relationship"
            ],
            "example": "relationship"
          },
          "item_id": {
            "type": "string",
            "description": "ID of the item (required)",
            "example": "ITM-0001"
          },
          "supplier_id": {
            "type": "string",
            "description": "ID of the supplier (required)",
            "example": "SUP-0001"
          },
          "supplier_part_number": {
            "type": "string",
            "description": "Supplier's part number for this item (optional)",
            "maxLength": 100,
            "nullable": true,
            "example": "TC-RES-100K"
          },
          "price": {
            "type": "number",
            "description": "Price from this supplier (optional)",
            "minimum": 0,
            "nullable": true,
            "example": 0.05
          },
          "currency": {
            "type": "string",
            "description": "Currency code (optional, 3 characters)",
            "minLength": 3,
            "maxLength": 3,
            "nullable": true,
            "example": "USD"
          },
          "lead_time_days": {
            "type": "integer",
            "description": "Lead time in days (optional)",
            "minimum": 0,
            "nullable": true,
            "example": 7
          },
          "is_preferred": {
            "type": "boolean",
            "description": "Whether this is the preferred supplier for this item",
            "example": true
          }
        },
        "required": [
          "item_id",
          "supplier_id"
        ]
      },
      "ItemSupplierUpdateRequest": {
        "type": "object",
        "description": "Request payload for updating an existing item-supplier relationship",
        "properties": {
          "type": {
            "type": "string",
            "description": "Must be 'relationship' to update item-supplier relationship",
            "enum": [
              "relationship"
            ],
            "example": "relationship"
          },
          "supplier_part_number": {
            "type": "string",
            "description": "Supplier's part number for this item",
            "maxLength": 100,
            "nullable": true,
            "example": "TC-RES-100K-V2"
          },
          "price": {
            "type": "number",
            "description": "Price from this supplier",
            "minimum": 0,
            "nullable": true,
            "example": 0.06
          },
          "currency": {
            "type": "string",
            "description": "Currency code (3 characters)",
            "minLength": 3,
            "maxLength": 3,
            "nullable": true,
            "example": "USD"
          },
          "lead_time_days": {
            "type": "integer",
            "description": "Lead time in days",
            "minimum": 0,
            "nullable": true,
            "example": 5
          },
          "is_preferred": {
            "type": "boolean",
            "description": "Whether this is the preferred supplier for this item",
            "example": false
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "USR-1234"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "full_name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "role": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "ROL-123"
              },
              "slug": {
                "type": "string",
                "example": "manager"
              },
              "title": {
                "type": "string",
                "example": "Manager"
              },
              "forbidden": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "users.delete"
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-16T10:00:00Z"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-16T10:00:00Z"
              }
            }
          },
          "is_super_admin": {
            "type": "boolean",
            "example": false
          },
          "is_manager": {
            "type": "boolean",
            "example": true
          },
          "is_employee": {
            "type": "boolean",
            "example": false
          },
          "is_admin": {
            "type": "boolean",
            "example": true
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "organization": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "ORG-123"
              },
              "name": {
                "type": "string",
                "example": "Acme Inc."
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          }
        }
      },
      "UserCollection": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "message": {
            "type": "string",
            "example": "Users retrieved successfully"
          }
        }
      },
      "UserSingle": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/User"
          },
          "message": {
            "type": "string",
            "example": "User retrieved successfully"
          }
        }
      },
      "UserRequest": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password",
          "password_confirmation"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com",
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "Password123!",
            "minLength": 8
          },
          "password_confirmation": {
            "type": "string",
            "format": "password",
            "example": "Password123!"
          },
          "role_id": {
            "type": "integer",
            "example": 2
          },
          "org_id": {
            "type": "integer",
            "example": 1
          },
          "is_active": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com",
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "NewPassword123!",
            "minLength": 8
          },
          "password_confirmation": {
            "type": "string",
            "format": "password",
            "example": "NewPassword123!"
          },
          "role_id": {
            "type": "integer",
            "example": 2
          },
          "org_id": {
            "type": "integer",
            "example": 1
          },
          "is_active": {
            "type": "boolean",
            "example": true
          }
        }
      }
    }
  },
  "paths": {
    "/api/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "description": "Login with email and password to get an encrypted Bearer token.",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "description": "Revokes the current access token",
        "operationId": "logout",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get user profile",
        "description": "Returns information about the currently authenticated user",
        "operationId": "getUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/UserProfile"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "description": "Retrieve all categories with advanced filtering. Supports searching by name and parent relationships. Returns categories in their natural hierarchical structure with nested children.",
        "operationId": "getCategories",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by category name (partial match, case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Electronics"
          },
          {
            "name": "parent_id",
            "in": "query",
            "description": "Filter by parent category ID. Use 'null' to get root categories (no parent).",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "CAT-0001"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related data (comma-separated). Available: parent, children, childrenRecursive, organization, items",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "parent,children,organization,items"
          }
        ],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CategoryHierarchical"
                      }
                    }
                  }
                },
                "examples": {
                  "hierarchical": {
                    "summary": "Hierarchical categories with nested children",
                    "value": {
                      "status": "success",
                      "message": "Categories retrieved successfully",
                      "data": [
                        {
                          "id": "CAT-0001",
                          "name": "Electronics",
                          "parent_id": null,
                          "path": "/CAT-0001/",
                          "org_id": "org_xyz789",
                          "created_at": "2024-01-15T10:30:00Z",
                          "updated_at": "2024-01-15T10:30:00Z",
                          "children": [
                            {
                              "id": "CAT-0002",
                              "name": "Computers",
                              "parent_id": "CAT-0001",
                              "path": "/CAT-0001/CAT-0002/",
                              "org_id": "org_xyz789",
                              "created_at": "2024-01-15T11:00:00Z",
                              "updated_at": "2024-01-15T11:00:00Z",
                              "children": [
                                {
                                  "id": "CAT-0003",
                                  "name": "Laptops",
                                  "parent_id": "CAT-0002",
                                  "path": "/CAT-0001/CAT-0002/CAT-0003/",
                                  "org_id": "org_xyz789",
                                  "created_at": "2024-01-15T11:30:00Z",
                                  "updated_at": "2024-01-15T11:30:00Z",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "flat": {
                    "summary": "Flat list of categories (hierarchy=false)",
                    "value": {
                      "status": "success",
                      "message": "Categories retrieved successfully",
                      "data": [
                        {
                          "id": "CAT-0001",
                          "name": "Electronics",
                          "parent_id": null,
                          "path": "/CAT-0001/",
                          "org_id": "org_xyz789",
                          "created_at": "2024-01-15T10:30:00Z",
                          "updated_at": "2024-01-15T10:30:00Z"
                        },
                        {
                          "id": "CAT-0002",
                          "name": "Computers",
                          "parent_id": "CAT-0001",
                          "path": "/CAT-0001/CAT-0002/",
                          "org_id": "org_xyz789",
                          "created_at": "2024-01-15T11:00:00Z",
                          "updated_at": "2024-01-15T11:00:00Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Unknown query parameter: invalid_param",
                  "code": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "code": 400
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new category",
        "description": "Create a new category in the organization. Supports hierarchical structure by specifying parent_id. The system automatically generates the path based on the hierarchy.",
        "operationId": "createCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInput"
              },
              "examples": {
                "root_category": {
                  "summary": "Create a root category",
                  "value": {
                    "name": "Electronics",
                    "parent_id": null
                  }
                },
                "child_category": {
                  "summary": "Create a child category",
                  "value": {
                    "name": "Computers",
                    "parent_id": "CAT-0001"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                },
                "example": {
                  "status": "success",
                  "message": "Resource created successfully",
                  "data": {
                    "id": "CAT-0004",
                    "name": "Computers",
                    "parent_id": "CAT-0001",
                    "path": "/CAT-0001/CAT-0004/",
                    "org_id": "org_xyz789",
                    "created_at": "2024-01-16T14:20:00Z",
                    "updated_at": "2024-01-16T14:20:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Empty data or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Data cannot be empty",
                  "code": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "code": 400
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Category with this name already exists under the same parent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Resource already exists",
                  "code": 409
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryValidationErrorResponse"
                },
                "example": {
                  "message": "The given data was invalid.",
                  "errors": {
                    "name": [
                      "The category name is required and cannot be empty"
                    ],
                    "parent_id": [
                      "The selected parent category does not exist in your organization"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get category by ID",
        "description": "Retrieve a specific category by its public ID with optional related data.",
        "operationId": "getCategoryById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Public ID of the category to retrieve",
            "schema": {
              "type": "string"
            },
            "example": "CAT-0001"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related data (comma-separated). Available: parent, children, childrenRecursive, organization, items",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "parent,children,organization"
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                },
                "example": {
                  "status": "success",
                  "message": "Success",
                  "data": {
                    "id": "CAT-0001",
                    "name": "Electronics",
                    "parent_id": null,
                    "path": "/CAT-0001/",
                    "org_id": "org_xyz789",
                    "created_at": "2024-01-15T10:30:00Z",
                    "updated_at": "2024-01-15T10:30:00Z",
                    "parent": null,
                    "children": [
                      {
                        "id": "CAT-0002",
                        "name": "Computers",
                        "parent_id": "CAT-0001",
                        "path": "/CAT-0001/CAT-0002/",
                        "org_id": "org_xyz789",
                        "created_at": "2024-01-15T11:00:00Z",
                        "updated_at": "2024-01-15T11:00:00Z"
                      }
                    ],
                    "organization": {
                      "id": "org_xyz789",
                      "name": "ACME Corporation"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Category does not exist or does not belong to user's organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Categories"
        ],
        "summary": "Update category",
        "description": "Update an existing category. When changing parent_id, the path is automatically recalculated. Moving a category will also update paths for all its descendants.",
        "operationId": "updateCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Public ID of the category to update",
            "schema": {
              "type": "string"
            },
            "example": "CAT-0001"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInput"
              },
              "examples": {
                "rename_category": {
                  "summary": "Rename a category",
                  "value": {
                    "name": "Consumer Electronics"
                  }
                },
                "move_category": {
                  "summary": "Move category to different parent",
                  "value": {
                    "name": "Electronics",
                    "parent_id": "CAT-0005"
                  }
                },
                "make_root_category": {
                  "summary": "Make category a root category",
                  "value": {
                    "name": "Electronics",
                    "parent_id": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                },
                "example": {
                  "status": "success",
                  "message": "Resource updated successfully",
                  "data": {
                    "id": "CAT-0001",
                    "name": "Consumer Electronics",
                    "parent_id": "CAT-0005",
                    "path": "/CAT-0005/CAT-0001/",
                    "org_id": "org_xyz789",
                    "created_at": "2024-01-15T10:30:00Z",
                    "updated_at": "2024-01-16T14:25:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Empty data, circular reference, or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Unknown query parameter: invalid_param",
                  "code": 400
                },
                "examples": {
                  "empty_data": {
                    "summary": "Empty request data",
                    "value": {
                      "status": "error",
                      "message": "Data cannot be empty",
                      "code": 400
                    }
                  },
                  "circular_reference": {
                    "summary": "Circular reference detected",
                    "value": {
                      "status": "error",
                      "message": "Cannot set a category as its own parent or descendant",
                      "code": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Category does not exist or does not belong to user's organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Category with this name already exists under the same parent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Resource already exists",
                  "code": 409
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryValidationErrorResponse"
                },
                "example": {
                  "message": "The given data was invalid.",
                  "errors": {
                    "name": [
                      "The category name cannot exceed 100 characters"
                    ],
                    "parent_id": [
                      "The selected parent category does not exist in your organization"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete category",
        "description": "Delete a category from the system. Important: If the category has child categories, they will automatically become top-level categories (orphaned). Items in this category will become unassigned and may need to be recategorized.",
        "operationId": "deleteCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Public ID of the category to delete",
            "schema": {
              "type": "string"
            },
            "example": "CAT-0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource deleted successfully"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "success",
                  "message": "Resource deleted successfully",
                  "code": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Category does not exist or does not belong to user's organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          }
        }
      }
    },
    "/api/checks": {
      "get": {
        "tags": [
          "Check-In/Out"
        ],
        "summary": "Get all check-in/out records",
        "description": "Retrieve all check-in/out records with advanced filtering. Supports filtering by user, item location, dates, status, and more. Returns comprehensive tracking information for inventory movements.",
        "operationId": "getCheckInOuts",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user who checked out the item",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "USR-0001"
          },
          {
            "name": "trackable_id",
            "in": "query",
            "description": "Filter by trackable item ID (usually ItemLocation ID)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "IL-0001"
          },
          {
            "name": "trackable_type",
            "in": "query",
            "description": "Filter by trackable item type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "App\\Models\\ItemLocation",
                "App\\Models\\Item"
              ]
            },
            "example": "App\\Models\\ItemLocation"
          },
          {
            "name": "checkout_location_id",
            "in": "query",
            "description": "Filter by checkout location ID",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "LOC-0001"
          },
          {
            "name": "checkin_location_id",
            "in": "query",
            "description": "Filter by check-in location ID",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "LOC-0002"
          },
          {
            "name": "status_out_id",
            "in": "query",
            "description": "Filter by checkout status ID",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "STS-0001"
          },
          {
            "name": "status_in_id",
            "in": "query",
            "description": "Filter by check-in status ID",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "STS-0002"
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "is_checked_out",
            "in": "query",
            "description": "Filter for items currently checked out (not returned)",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "is_checked_in",
            "in": "query",
            "description": "Filter for items that have been checked in (returned)",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": false
          },
          {
            "name": "is_overdue",
            "in": "query",
            "description": "Filter for overdue items (past expected return date and not checked in)",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "checkout_date_from",
            "in": "query",
            "description": "Filter by checkout date from (ISO 8601 format)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-01-01"
          },
          {
            "name": "checkout_date_to",
            "in": "query",
            "description": "Filter by checkout date to (ISO 8601 format)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-12-31"
          },
          {
            "name": "expected_return_date_from",
            "in": "query",
            "description": "Filter by expected return date from (ISO 8601 format)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-01-15"
          },
          {
            "name": "expected_return_date_to",
            "in": "query",
            "description": "Filter by expected return date to (ISO 8601 format)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-02-15"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related data (comma-separated). Available: user, checkinUser, trackable, checkoutLocation, checkinLocation, statusOut, statusIn, organization",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "user,trackable,checkoutLocation,statusOut"
          }
        ],
        "responses": {
          "200": {
            "description": "Check-in/out records retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Check-in/out records retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CheckInOut"
                      }
                    }
                  }
                },
                "examples": {
                  "active_checkouts": {
                    "summary": "Active checkouts with relationships",
                    "value": {
                      "status": "success",
                      "message": "Check-in/out records retrieved successfully",
                      "data": [
                        {
                          "id": "CHK-0001",
                          "quantity": 2,
                          "checkout_date": "2024-01-15T10:30:00Z",
                          "expected_return_date": "2024-01-22T10:30:00Z",
                          "checkin_date": null,
                          "checkin_quantity": null,
                          "duration_days": null,
                          "reference": "REF-001",
                          "notes": "Checkout for project Alpha",
                          "is_active": true,
                          "is_checked_out": true,
                          "is_checked_in": false,
                          "is_overdue": false,
                          "user": {
                            "id": "USR-0001",
                            "name": "John Doe",
                            "email": "john.doe@example.com"
                          },
                          "trackable": {
                            "id": "IL-0001",
                            "type": "ItemLocation",
                            "item": {
                              "id": "ITM-0001",
                              "name": "Laptop Dell XPS 13",
                              "code": "LAPTOP-001"
                            },
                            "location": {
                              "id": "LOC-0001",
                              "name": "Main Warehouse",
                              "code": "WH-001"
                            },
                            "quantity": 10
                          },
                          "checkout_location": {
                            "id": "LOC-0001",
                            "name": "Main Warehouse",
                            "code": "WH-001"
                          },
                          "status_out": {
                            "id": "STS-0001",
                            "name": "In Use",
                            "color": "#ff6b35"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Unknown query parameter: invalid_param",
                  "data": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "data": null
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Check-In/Out"
        ],
        "summary": "Create a new check-in/out record",
        "description": "Create a new check-in/out record manually. For standard checkout/checkin operations, use the dedicated endpoints.",
        "operationId": "createCheckInOut",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckInOutInput"
              },
              "examples": {
                "manual_checkout": {
                  "summary": "Manual checkout record",
                  "value": {
                    "user_id": "USR-0001",
                    "trackable_id": "IL-0001",
                    "trackable_type": "App\\Models\\ItemLocation",
                    "checkout_location_id": "LOC-0001",
                    "checkout_date": "2024-01-15T10:30:00Z",
                    "quantity": 1,
                    "expected_return_date": "2024-01-22T10:30:00Z",
                    "reference": "REF-001",
                    "notes": "Manual checkout for maintenance",
                    "status_out_id": "STS-0001",
                    "is_active": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Check-in/out record created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutResponse"
                },
                "example": {
                  "status": "success",
                  "message": "Resource created successfully",
                  "data": {
                    "id": "CHK-0001",
                    "quantity": 1,
                    "checkout_date": "2024-01-15T10:30:00Z",
                    "expected_return_date": "2024-01-22T10:30:00Z",
                    "checkin_date": null,
                    "checkin_quantity": null,
                    "duration_days": null,
                    "reference": "REF-001",
                    "notes": "Manual checkout for maintenance",
                    "is_active": true,
                    "is_checked_out": true,
                    "is_checked_in": false,
                    "is_overdue": false
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - Invalid field values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutValidationErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/checks/{id}": {
      "get": {
        "tags": [
          "Check-In/Out"
        ],
        "summary": "Get a specific check-in/out record",
        "description": "Retrieve a specific check-in/out record by its ID with all related information.",
        "operationId": "getCheckInOut",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Check-in/out record ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "CHK-0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Check-in/out record retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutResponse"
                }
              }
            }
          },
          "404": {
            "description": "Check-in/out record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Check-In/Out"
        ],
        "summary": "Update a check-in/out record",
        "description": "Update a specific check-in/out record. Commonly used for updating notes, status, or other metadata.",
        "operationId": "updateCheckInOut",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Check-in/out record ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "CHK-0001"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckInOutInput"
              },
              "examples": {
                "update_notes": {
                  "summary": "Update notes and status",
                  "value": {
                    "notes": "Updated notes for this checkout",
                    "status_out_id": "STS-0002"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Check-in/out record updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutResponse"
                }
              }
            }
          },
          "404": {
            "description": "Check-in/out record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutValidationErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Check-In/Out"
        ],
        "summary": "Delete a check-in/out record",
        "description": "Delete a specific check-in/out record. Use with caution as this removes the tracking history.",
        "operationId": "deleteCheckInOut",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Check-in/out record ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "CHK-0001"
          }
        ],
        "responses": {
          "204": {
            "description": "Check-in/out record deleted successfully"
          },
          "404": {
            "description": "Check-in/out record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/checks/out/{itemLocationId}": {
      "post": {
        "tags": [
          "Check-In/Out"
        ],
        "summary": "Check out an item",
        "description": "Check out an item from a specific location. This is the primary endpoint for checkout operations from the mobile app.",
        "operationId": "checkoutItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "itemLocationId",
            "in": "path",
            "description": "Item Location ID to check out from",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "IL-0001"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutInput"
              },
              "examples": {
                "basic_checkout": {
                  "summary": "Basic checkout",
                  "value": {
                    "quantity": 2,
                    "expected_return_date": "2024-01-22T10:30:00Z",
                    "reference": "REF-001",
                    "notes": "Checkout for project Alpha"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item checked out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutResponse"
                },
                "example": {
                  "status": "success",
                  "message": "Item checked out successfully",
                  "data": {
                    "id": "CHK-0001",
                    "quantity": 2,
                    "checkout_date": "2024-01-15T10:30:00Z",
                    "expected_return_date": "2024-01-22T10:30:00Z",
                    "checkin_date": null,
                    "checkin_quantity": null,
                    "duration_days": null,
                    "reference": "REF-001",
                    "notes": "Checkout for project Alpha",
                    "is_active": true,
                    "is_checked_out": true,
                    "is_checked_in": false,
                    "is_overdue": false
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item location not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Insufficient quantity available",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Insufficient quantity available. Available: 1, Requested: 2",
                  "data": null
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutValidationErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/checks/in/{itemLocationId}": {
      "post": {
        "tags": [
          "Check-In/Out"
        ],
        "summary": "Check in an item",
        "description": "Check in an item to a specific location. This is the primary endpoint for checkin operations from the mobile app.",
        "operationId": "checkinItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "itemLocationId",
            "in": "path",
            "description": "Item Location ID to check in to",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "IL-0001"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckinInput"
              },
              "examples": {
                "basic_checkin": {
                  "summary": "Basic checkin",
                  "value": {
                    "checkin_quantity": 2,
                    "checkin_location_id": "LOC-0001",
                    "reference": "REF-001",
                    "notes": "Returned from project Alpha"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item checked in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutResponse"
                },
                "example": {
                  "status": "success",
                  "message": "Item checked in successfully",
                  "data": {
                    "id": "CHK-0001",
                    "quantity": 2,
                    "checkout_date": "2024-01-15T10:30:00Z",
                    "expected_return_date": "2024-01-22T10:30:00Z",
                    "checkin_date": "2024-01-20T14:30:00Z",
                    "checkin_quantity": 2,
                    "duration_days": 5,
                    "reference": "REF-001",
                    "notes": "Returned from project Alpha",
                    "is_active": false,
                    "is_checked_out": false,
                    "is_checked_in": true,
                    "is_overdue": false
                  }
                }
              }
            }
          },
          "404": {
            "description": "No active checkout found for this item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "No active checkout found for this item",
                  "data": null
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutValidationErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/checks/availability/{itemLocationId}": {
      "get": {
        "tags": [
          "Check-In/Out"
        ],
        "summary": "Check item availability",
        "description": "Check the availability status of an item location, including total quantity, checked out quantity, and available quantity.",
        "operationId": "checkItemAvailability",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "itemLocationId",
            "in": "path",
            "description": "Item Location ID to check availability for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "IL-0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Availability data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Availability data retrieved"
                    },
                    "data": {
                      "$ref": "#/components/schemas/AvailabilityData"
                    }
                  }
                },
                "example": {
                  "status": "success",
                  "message": "Availability data retrieved",
                  "data": {
                    "total_quantity": 10,
                    "checked_out_quantity": 3,
                    "available_quantity": 7,
                    "availability_status": "partially_available"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item location not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/checks/history/{itemLocationId}": {
      "get": {
        "tags": [
          "Check-In/Out"
        ],
        "summary": "Get item check-in/out history",
        "description": "Retrieve the complete check-in/out history for a specific item location.",
        "operationId": "getItemHistory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "itemLocationId",
            "in": "path",
            "description": "Item Location ID to get history for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "IL-0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Check-in/out history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Check-in/out history retrieved"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CheckInOut"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item location not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInOutErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/item-locations": {
      "get": {
        "tags": [
          "Item Locations"
        ],
        "summary": "Get all item locations",
        "description": "Retrieve all item locations with advanced filtering options. Supports filtering by location, item, date, and quantity status. Includes related item and location data.",
        "operationId": "getItemLocations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "query",
            "description": "Filter by location ID to show only items in a specific location",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "LOC-0001"
          },
          {
            "name": "item_id",
            "in": "query",
            "description": "Filter by item ID to show all locations for a specific item",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ITM-0001"
          },
          {
            "name": "moved_date",
            "in": "query",
            "description": "Filter by moved date (YYYY-MM-DD format)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-01-15"
          },
          {
            "name": "positive_quantity",
            "in": "query",
            "description": "Filter to show only item locations with positive quantities (true/false)",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related data (comma-separated). Available: item, item.category, item.status, item.unitOfMeasure, location, organization",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "item,location,item.category"
          }
        ],
        "responses": {
          "200": {
            "description": "Item locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Item locations retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemLocation"
                      }
                    }
                  }
                },
                "example": {
                  "status": "success",
                  "message": "Item locations retrieved successfully",
                  "data": [
                    {
                      "id": "IL-0001",
                      "quantity": 25.5,
                      "moved_date": "2024-01-15",
                      "notes": "Items stored on shelf B3, handle with care",
                      "created_at": "2024-01-15T10:30:00Z",
                      "updated_at": "2024-01-15T10:30:00Z",
                      "organization": {
                        "id": "org_xyz789",
                        "name": "ACME Corporation"
                      },
                      "item": {
                        "id": "ITM-0001",
                        "name": "Laptop Computer",
                        "sku": "LAP-2024-001",
                        "category": {
                          "id": "CAT-0001",
                          "name": "Electronics"
                        }
                      },
                      "location": {
                        "id": "LOC-0001",
                        "name": "Warehouse A",
                        "code": "WH-A"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Unknown query parameter: invalid_param",
                  "code": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "code": 400
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Item Locations"
        ],
        "summary": "Create a new item location",
        "description": "Assign an item to a location with a specific quantity. This tracks the distribution of items across multiple storage locations. When an item is first assigned to a location, its tracking mode may change from 'abstract' to 'bulk'.",
        "operationId": "createItemLocation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemLocationInput"
              },
              "examples": {
                "basic_assignment": {
                  "summary": "Basic item location assignment",
                  "value": {
                    "org_id": "org_xyz789",
                    "item_id": "ITM-0001",
                    "location_id": "LOC-0001",
                    "quantity": 25.5,
                    "moved_date": "2024-01-15",
                    "notes": "Initial stock placement"
                  }
                },
                "minimal_assignment": {
                  "summary": "Minimal required fields",
                  "value": {
                    "org_id": "org_xyz789",
                    "item_id": "ITM-0002",
                    "location_id": "LOC-0002",
                    "quantity": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item location created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ItemLocation"
                    }
                  }
                },
                "example": {
                  "status": "success",
                  "message": "Resource created successfully",
                  "data": {
                    "id": "IL-0001",
                    "quantity": 25.5,
                    "moved_date": "2024-01-15",
                    "notes": "Initial stock placement",
                    "created_at": "2024-01-15T10:30:00Z",
                    "updated_at": "2024-01-15T10:30:00Z",
                    "organization": {
                      "id": "org_xyz789",
                      "name": "ACME Corporation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Empty data or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Data cannot be empty",
                  "code": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "code": 400
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Item already assigned to this location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "This item is already assigned to this location for the organization",
                  "code": 400
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationValidationErrorResponse"
                },
                "example": {
                  "message": "The given data was invalid.",
                  "errors": {
                    "item_id": [
                      "The selected item is invalid"
                    ],
                    "location_id": [
                      "The selected location is invalid"
                    ],
                    "quantity": [
                      "The quantity cannot be negative"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/item-locations/{id}": {
      "get": {
        "tags": [
          "Item Locations"
        ],
        "summary": "Get item location by ID",
        "description": "Retrieve a specific item location by its public ID with optional related data.",
        "operationId": "getItemLocationById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Public ID of the item location to retrieve",
            "schema": {
              "type": "string"
            },
            "example": "IL-0001"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related data (comma-separated). Available: item, item.category, item.status, item.unitOfMeasure, location, organization",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "item,location,item.category"
          }
        ],
        "responses": {
          "200": {
            "description": "Item location retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Item location retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ItemLocation"
                    }
                  }
                },
                "example": {
                  "status": "success",
                  "message": "Item location retrieved successfully",
                  "data": {
                    "id": "IL-0001",
                    "quantity": 25.5,
                    "moved_date": "2024-01-15",
                    "notes": "Items stored on shelf B3, handle with care",
                    "created_at": "2024-01-15T10:30:00Z",
                    "updated_at": "2024-01-15T10:30:00Z",
                    "organization": {
                      "id": "org_xyz789",
                      "name": "ACME Corporation"
                    },
                    "item": {
                      "id": "ITM-0001",
                      "name": "Laptop Computer",
                      "sku": "LAP-2024-001"
                    },
                    "location": {
                      "id": "LOC-0001",
                      "name": "Warehouse A",
                      "code": "WH-A"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Item location does not exist or does not belong to user's organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          }
        }
      }
    },
    "/api/item-locations/move": {
      "post": {
        "tags": [
          "Item Locations"
        ],
        "summary": "Move items between locations",
        "description": "Move a specified quantity of an item from one location to another. This operation handles partial moves and automatically manages quantities at both source and destination locations. If the entire quantity is moved from the source, the source item location record is deleted.",
        "operationId": "moveItemBetweenLocations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemMoveRequest"
              },
              "examples": {
                "partial_move": {
                  "summary": "Move part of item quantity",
                  "value": {
                    "org_id": "org_xyz789",
                    "item_id": "ITM-0001",
                    "from_location_id": "LOC-0001",
                    "to_location_id": "LOC-0002",
                    "quantity": 10,
                    "moved_date": "2024-01-16",
                    "notes": "Moved for maintenance purposes"
                  }
                },
                "full_move": {
                  "summary": "Move entire quantity to new location",
                  "value": {
                    "org_id": "org_xyz789",
                    "item_id": "ITM-0002",
                    "from_location_id": "LOC-0003",
                    "to_location_id": "LOC-0004",
                    "quantity": 50
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Items moved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Item moved successfully"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "success",
                  "message": "Item moved successfully",
                  "code": 400
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Insufficient quantity or invalid operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Unknown query parameter: invalid_param",
                  "code": 400
                },
                "examples": {
                  "insufficient_quantity": {
                    "summary": "Not enough quantity available",
                    "value": {
                      "status": "error",
                      "message": "Not enough quantity available at the source location",
                      "code": 400
                    }
                  },
                  "negative_quantity": {
                    "summary": "Negative quantity provided",
                    "value": {
                      "status": "error",
                      "message": "Quantity cannot be negative",
                      "code": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "code": 400
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLocationValidationErrorResponse"
                },
                "example": {
                  "message": "The given data was invalid.",
                  "errors": {
                    "from_location_id": [
                      "The selected source location is invalid"
                    ],
                    "to_location_id": [
                      "The destination location must be different from the source location"
                    ],
                    "quantity": [
                      "The quantity is required"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get all items",
        "description": "Retrieve a list of items with optional filtering by various parameters",
        "operationId": "getItems",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query to filter items by name, code, description, or serial number",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "laptop"
          },
          {
            "name": "scannable",
            "in": "query",
            "description": "Scan code to find items by barcode, serial number, or code (exact match)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "1234567890"
          },
          {
            "name": "tracking_mode",
            "in": "query",
            "description": "Filter by tracking mode",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "abstract",
                "bulk",
                "serialized"
              ]
            },
            "example": "serialized"
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Filter by category ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "location_id",
            "in": "query",
            "description": "Filter by location ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "org_id",
            "in": "query",
            "description": "Filter by organization ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name (partial match)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "laptop"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Filter by code (partial match)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "LPT"
          },
          {
            "name": "barcode",
            "in": "query",
            "description": "Filter by exact barcode match",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "1234567890"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related entities (comma-separated list)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "category,status,locations,organization,unitOfMeasure,suppliers",
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Create item",
        "description": "Create a new item",
        "operationId": "createItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Item object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get item by ID",
        "description": "Retrieve detailed information about a specific item",
        "operationId": "getItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ITM-1234"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related entities (comma-separated list)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "category,status,locations,organization,unitOfMeasure,suppliers",
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Items"
        ],
        "summary": "Update item",
        "description": "Update an item with the provided data",
        "operationId": "updateItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ITM-1234"
          }
        ],
        "requestBody": {
          "description": "Item data that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete an item",
        "description": "Delete an item by ID",
        "operationId": "deleteItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ITM-1234"
          }
        ],
        "responses": {
          "204": {
            "description": "Item deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{id}/maintenance/toggle": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Toggle maintenance",
        "description": "Send an item to maintenance or return it from maintenance",
        "operationId": "toggleItemMaintenance",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ITM-1234"
          }
        ],
        "requestBody": {
          "description": "Maintenance toggle information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Maintenance status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get all locations",
        "description": "Retrieve all locations with advanced filtering and optional hierarchical view. Supports searching by name, code, description, active status, and parent relationships. By default returns hierarchical structure with nested children.",
        "operationId": "getLocations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "hierarchy",
            "in": "query",
            "description": "Return locations in hierarchical structure (true) or flat list (false). Hierarchical view shows nested parent-child relationships.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by location name (partial match, case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Warehouse"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Filter by location code (partial match, case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "WH-"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Filter by location description (partial match, case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "storage"
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status. Use 'true' for active, 'false' for inactive locations.",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "parent_id",
            "in": "query",
            "description": "Filter by parent location ID. Use 'null' to get root locations (no parent).",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "loc_abc123"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related data (comma-separated). Available: parent, children, childrenRecursive, organization, items, attachments",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "parent,children,organization,items"
          }
        ],
        "responses": {
          "200": {
            "description": "Locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Location"
                      }
                    }
                  }
                },
                "examples": {
                  "hierarchical": {
                    "summary": "Hierarchical locations with nested children",
                    "value": {
                      "status": "success",
                      "message": "Success",
                      "data": [
                        {
                          "id": "loc_abc123",
                          "name": "Main Warehouse",
                          "code": "WH-MAIN",
                          "description": "Primary storage facility for all products",
                          "path": "/loc_abc123/",
                          "is_active": true,
                          "parent_id": null,
                          "organization": {
                            "id": "org_xyz789",
                            "name": "ACME Corporation"
                          },
                          "childrenRecursive": [
                            {
                              "id": "loc_def456",
                              "name": "Electronics Section",
                              "code": "WH-MAIN-ELEC",
                              "description": "Dedicated area for electronic components",
                              "path": "/loc_abc123/loc_def456/",
                              "is_active": true,
                              "parent_id": "loc_abc123",
                              "childrenRecursive": [
                                {
                                  "id": "loc_ghi789",
                                  "name": "Shelf A1",
                                  "code": "WH-MAIN-ELEC-A1",
                                  "description": "Top shelf for small electronics",
                                  "path": "/loc_abc123/loc_def456/loc_ghi789/",
                                  "is_active": true,
                                  "parent_id": "loc_def456",
                                  "childrenRecursive": [],
                                  "items_count": 25
                                }
                              ],
                              "items_count": 45
                            }
                          ],
                          "items_count": 120,
                          "created_at": "2024-01-15T10:30:00Z",
                          "updated_at": "2024-01-15T10:30:00Z"
                        }
                      ]
                    }
                  },
                  "filtered": {
                    "summary": "Filtered locations by active status",
                    "value": {
                      "status": "success",
                      "message": "Success",
                      "data": [
                        {
                          "id": "loc_abc123",
                          "name": "Main Warehouse",
                          "code": "WH-MAIN",
                          "description": "Primary storage facility",
                          "path": "/loc_abc123/",
                          "is_active": true,
                          "parent_id": null,
                          "items_count": 120,
                          "created_at": "2024-01-15T10:30:00Z",
                          "updated_at": "2024-01-15T10:30:00Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unknown query parameter: invalid_param"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Unknown query parameter: invalid_param",
                  "code": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "User must belong to an organization"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "code": 400
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Create a new location",
        "description": "Create a new location in the organization. Supports hierarchical structure by specifying parent_id. The system automatically generates the path based on the hierarchy.",
        "operationId": "createLocation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationCreateRequest"
              },
              "examples": {
                "root_location": {
                  "summary": "Root level warehouse",
                  "value": {
                    "name": "Main Warehouse",
                    "code": "WH-MAIN",
                    "description": "Primary storage facility for all products",
                    "parent_id": null,
                    "is_active": true
                  }
                },
                "child_location": {
                  "summary": "Child location within warehouse",
                  "value": {
                    "name": "Electronics Section",
                    "code": "WH-MAIN-ELEC",
                    "description": "Dedicated area for electronic components and devices",
                    "parent_id": "loc_abc123",
                    "is_active": true
                  }
                },
                "nested_location": {
                  "summary": "Deeply nested storage location",
                  "value": {
                    "name": "Shelf A1",
                    "code": "WH-MAIN-ELEC-A1",
                    "description": "Top shelf for small electronic components",
                    "parent_id": "loc_def456",
                    "is_active": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Location created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Location"
                    }
                  }
                },
                "examples": {
                  "created_location": {
                    "summary": "Newly created location",
                    "value": {
                      "status": "success",
                      "message": "Resource created successfully",
                      "data": {
                        "id": "loc_new123",
                        "name": "Electronics Section",
                        "code": "WH-MAIN-ELEC",
                        "description": "Dedicated area for electronic components",
                        "path": "/loc_abc123/loc_new123/",
                        "is_active": true,
                        "parent_id": "loc_abc123",
                        "parent": {
                          "id": "loc_abc123",
                          "name": "Main Warehouse",
                          "code": "WH-MAIN"
                        },
                        "organization": {
                          "id": "org_xyz789",
                          "name": "ACME Corporation"
                        },
                        "items_count": 0,
                        "created_at": "2024-01-16T14:20:00Z",
                        "updated_at": "2024-01-16T14:20:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Empty data or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Data cannot be empty"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Data cannot be empty",
                  "code": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "User must belong to an organization"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "code": 400
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "The given data was invalid."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "The location name is required and cannot be empty"
                          ]
                        },
                        "code": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "This location code already exists in your organization"
                          ]
                        },
                        "parent_id": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "The selected parent location does not exist in your organization"
                          ]
                        }
                      }
                    }
                  }
                },
                "example": {
                  "message": "The given data was invalid."
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get location by ID",
        "description": "Retrieve a specific location with its details and hierarchical children. Automatically loads the complete hierarchy including all nested children.",
        "operationId": "getLocationById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "loc_abc123"
          }
        ],
        "responses": {
          "200": {
            "description": "Location retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/LocationWithHierarchy"
                    }
                  }
                },
                "examples": {
                  "location_with_hierarchy": {
                    "summary": "Location with complete hierarchy",
                    "value": {
                      "status": "success",
                      "message": "Resource retrieved successfully",
                      "data": {
                        "id": "loc_abc123",
                        "name": "Main Warehouse",
                        "code": "WH-MAIN",
                        "description": "Primary storage facility for all products",
                        "path": "/loc_abc123/",
                        "is_active": true,
                        "parent_id": null,
                        "organization": {
                          "id": "org_xyz789",
                          "name": "ACME Corporation"
                        },
                        "parent": null,
                        "childrenRecursive": [
                          {
                            "id": "loc_def456",
                            "name": "Electronics Section",
                            "code": "WH-MAIN-ELEC",
                            "description": "Electronic components area",
                            "path": "/loc_abc123/loc_def456/",
                            "is_active": true,
                            "parent_id": "loc_abc123",
                            "childrenRecursive": [
                              {
                                "id": "loc_ghi789",
                                "name": "Shelf A1",
                                "code": "WH-MAIN-ELEC-A1",
                                "description": "Top shelf for small electronics",
                                "path": "/loc_abc123/loc_def456/loc_ghi789/",
                                "is_active": true,
                                "parent_id": "loc_def456",
                                "childrenRecursive": [],
                                "items_count": 25
                              }
                            ],
                            "items_count": 45
                          }
                        ],
                        "items_count": 120,
                        "attachments": [],
                        "created_at": "2024-01-15T10:30:00Z",
                        "updated_at": "2024-01-15T10:30:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization or trying to access other organization's resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Trying to access other organization resources is not allowed, this action has been logged for security purposes"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Trying to access other organization resources is not allowed, this action has been logged for security purposes",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Location does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Locations"
        ],
        "summary": "Update location",
        "description": "Update an existing location's information. Supports partial updates. When changing parent_id, the system automatically recalculates the hierarchical path.",
        "operationId": "updateLocation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "loc_abc123"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationUpdateRequest"
              },
              "examples": {
                "name_update": {
                  "summary": "Update location name only",
                  "value": {
                    "name": "Renovated Main Warehouse"
                  }
                },
                "deactivate": {
                  "summary": "Deactivate location",
                  "value": {
                    "is_active": false
                  }
                },
                "move_location": {
                  "summary": "Move location to different parent",
                  "value": {
                    "parent_id": "loc_new_parent456"
                  }
                },
                "promote_to_root": {
                  "summary": "Make location a root location",
                  "value": {
                    "parent_id": null
                  }
                },
                "full_update": {
                  "summary": "Update multiple fields",
                  "value": {
                    "name": "Expanded Electronics Warehouse",
                    "code": "WH-ELEC-EXP",
                    "description": "Expanded warehouse dedicated to electronic components and devices",
                    "is_active": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Location"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Empty data or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Data cannot be empty"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Data cannot be empty",
                  "code": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization or trying to access other organization's resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Trying to access other organization resources is not allowed, this action has been logged for security purposes"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Trying to access other organization resources is not allowed, this action has been logged for security purposes",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Location does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "The given data was invalid."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "The location name cannot exceed 255 characters"
                          ]
                        },
                        "code": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "This location code already exists in your organization"
                          ]
                        },
                        "parent_id": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "The selected parent location does not exist in your organization"
                          ]
                        }
                      }
                    }
                  }
                },
                "example": {
                  "message": "The given data was invalid.",
                  "errors": {
                    "name": [
                      "The location name is required and cannot be empty"
                    ],
                    "code": [
                      "This location code already exists in your organization"
                    ],
                    "parent_id": [
                      "The selected parent location does not exist in your organization"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "summary": "Delete location",
        "description": "Delete a location from the system. Important: If the location has child locations, they will automatically become top-level locations (orphaned). Items in this location will become unassigned and may need to be relocated.",
        "operationId": "deleteLocation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "loc_abc123"
          }
        ],
        "responses": {
          "200": {
            "description": "Location deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource deleted successfully"
                    },
                    "warning": {
                      "type": "string",
                      "description": "Warning message if location had children",
                      "example": "Warning: Deleting a location with child locations. Child locations will become top-level locations."
                    }
                  }
                },
                "examples": {
                  "simple_delete": {
                    "summary": "Delete location without children",
                    "value": {
                      "success": true,
                      "message": "Resource deleted successfully"
                    }
                  },
                  "delete_with_children": {
                    "summary": "Delete location with child locations",
                    "value": {
                      "success": true,
                      "message": "Resource deleted successfully",
                      "warning": "Warning: Deleting a location with child locations. Child locations will become top-level locations."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization or trying to access other organization's resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Trying to access other organization resources is not allowed, this action has been logged for security purposes"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Trying to access other organization resources is not allowed, this action has been logged for security purposes",
                  "code": 400
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Location does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Location cannot be deleted due to dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Cannot delete resource as it is currently in use"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Cannot delete resource as it is currently in use",
                  "code": 400
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get all organizations",
        "description": "Get all organizations accessible to the user. Regular users can only see their own organization, while super admins can see all.",
        "operationId": "getOrganizations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "with",
            "in": "query",
            "description": "Include related entities (comma-separated list)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "users,items,locations",
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create a new organization",
        "description": "Create a new organization. This action requires super admin privileges.",
        "operationId": "createOrganization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Organization object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - requires super admin privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/active": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get active organizations",
        "description": "Get all active organizations. Regular users can only see their own organization if active, while super admins can see all active organizations.",
        "operationId": "getActiveOrganizations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{id}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get organization by ID",
        "description": "Get a specific organization by ID. Regular users can only access their own organization.",
        "operationId": "getOrganization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ORG-123"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related entities (comma-separated list)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "users,items,locations",
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - not authorized to view this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update an organization",
        "description": "Update an existing organization. This action requires super admin privileges.",
        "operationId": "updateOrganization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ORG-123"
          }
        ],
        "requestBody": {
          "description": "Organization data that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - requires super admin privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete an organization",
        "description": "Delete an organization by ID. This action requires super admin privileges.",
        "operationId": "deleteOrganization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ORG-123"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - requires super admin privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/suppliers": {
      "get": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Get all suppliers",
        "description": "Retrieve a list of suppliers with optional filtering. Use 'type=relationships' to get item-supplier relationships instead.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of data to retrieve (relationships for item-supplier relationships)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "relationships"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by supplier name (partial match, suppliers only)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Tech Components"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Filter by supplier code (partial match, suppliers only)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "TCL"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filter by supplier email (partial match, suppliers only)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "contact@techcomponents.com"
          },
          {
            "name": "city",
            "in": "query",
            "description": "Filter by supplier city (partial match, suppliers only)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "New York"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Filter by supplier country (partial match, suppliers only)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "United States"
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status (suppliers only)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "item_id",
            "in": "query",
            "description": "Filter by item ID (relationships only)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ITM-0001"
          },
          {
            "name": "supplier_id",
            "in": "query",
            "description": "Filter by supplier ID (relationships only)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "SUP-0001"
          },
          {
            "name": "is_preferred",
            "in": "query",
            "description": "Filter by preferred status (relationships only)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "min_price",
            "in": "query",
            "description": "Minimum price filter (relationships only)",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0
            },
            "example": 10
          },
          {
            "name": "max_price",
            "in": "query",
            "description": "Maximum price filter (relationships only)",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0
            },
            "example": 100
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Filter by currency code (relationships only)",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3
            },
            "example": "USD"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related models (comma-separated). For suppliers: items, itemSuppliers, stocks. For relationships: organization, item, supplier",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "items,itemSuppliers"
          }
        ],
        "responses": {
          "200": {
            "description": "Suppliers or relationships retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/Supplier"
                          },
                          {
                            "$ref": "#/components/schemas/ItemSupplier"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Organization access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Trying to access other organization resources is not allowed, this action has been logged for security purposes",
                  "code": 403
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Create new supplier",
        "description": "Create a new supplier or establish a relationship between an item and a supplier.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SupplierCreateRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ItemSupplierCreateRequest"
                  }
                ]
              },
              "examples": {
                "create_supplier": {
                  "summary": "Create new supplier",
                  "value": {
                    "name": "Tech Components Ltd",
                    "code": "TCL-001",
                    "contact_name": "John Smith",
                    "email": "contact@techcomponents.com",
                    "phone": "+1-555-123-4567",
                    "address": "123 Tech Street",
                    "city": "New York",
                    "state": "NY",
                    "postal_code": "10001",
                    "country": "United States",
                    "website": "https://techcomponents.com",
                    "tax_id": "123456789",
                    "notes": "Preferred supplier for electronic components",
                    "is_active": true
                  }
                },
                "create_item_supplier_relationship": {
                  "summary": "Create item-supplier relationship",
                  "value": {
                    "type": "relationship",
                    "item_id": "ITM-0001",
                    "supplier_id": "SUP-0001",
                    "supplier_part_number": "TC-RES-100K",
                    "price": 0.05,
                    "currency": "USD",
                    "lead_time_days": 7,
                    "is_preferred": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Supplier or relationship created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource created successfully"
                    },
                    "data": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Supplier"
                        },
                        {
                          "$ref": "#/components/schemas/ItemSupplier"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "example": {
                  "message": "The given data was invalid.",
                  "errors": {
                    "name": [
                      "The supplier name is required"
                    ],
                    "email": [
                      "Please enter a valid email address"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Organization access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Trying to access other organization resources is not allowed, this action has been logged for security purposes",
                  "code": 403
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Relationship already exists or duplicate constraint violation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Resource already exists",
                  "code": 409
                }
              }
            }
          }
        }
      }
    },
    "/suppliers/{id}": {
      "get": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Get supplier by ID",
        "description": "Retrieve details of a specific supplier or item-supplier relationship by ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Supplier ID (e.g., SUP-0001) or ItemSupplier relationship ID (e.g., IS-0001)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "SUP-0001"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of resource (relationship for item-supplier relationships)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "relationship"
              ]
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related models (comma-separated). For suppliers: items, itemSuppliers, stocks. For relationships: organization, item, supplier",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "items,itemSuppliers"
          }
        ],
        "responses": {
          "200": {
            "description": "Supplier or relationship retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource retrieved successfully"
                    },
                    "data": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Supplier"
                        },
                        {
                          "$ref": "#/components/schemas/ItemSupplier"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Organization access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Trying to access other organization resources is not allowed, this action has been logged for security purposes",
                  "code": 403
                }
              }
            }
          },
          "404": {
            "description": "Supplier or relationship not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "An internal server error occurred",
                  "code": 400
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Update supplier",
        "description": "Update an existing supplier's information or modify an item-supplier relationship.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Supplier ID (e.g., SUP-0001) or ItemSupplier relationship ID (e.g., IS-0001)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "SUP-0001"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SupplierUpdateRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ItemSupplierUpdateRequest"
                  }
                ]
              },
              "examples": {
                "update_supplier": {
                  "summary": "Update supplier information",
                  "value": {
                    "name": "Tech Components Ltd - Updated",
                    "contact_name": "Jane Doe",
                    "email": "newcontact@techcomponents.com",
                    "phone": "+1-555-987-6543",
                    "is_active": true
                  }
                },
                "update_item_supplier_relationship": {
                  "summary": "Update item-supplier relationship",
                  "value": {
                    "type": "relationship",
                    "price": 0.06,
                    "lead_time_days": 5,
                    "is_preferred": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Supplier or relationship updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource updated successfully"
                    },
                    "data": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Supplier"
                        },
                        {
                          "$ref": "#/components/schemas/ItemSupplier"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "example": {
                  "message": "The given data was invalid.",
                  "errors": {
                    "email": [
                      "Please enter a valid email address"
                    ],
                    "price": [
                      "The price cannot be negative"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Organization access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Trying to access other organization resources is not allowed, this action has been logged for security purposes",
                  "code": 403
                }
              }
            }
          },
          "404": {
            "description": "Supplier or relationship not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Delete supplier",
        "description": "Delete a supplier or remove an item-supplier relationship.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Supplier ID (e.g., SUP-0001) or ItemSupplier relationship ID (e.g., IS-0001)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "SUP-0001"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of resource to delete (relationship for item-supplier relationships)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "relationship"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Supplier or relationship deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource deleted successfully"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Organization access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Trying to access other organization resources is not allowed, this action has been logged for security purposes",
                  "code": 403
                }
              }
            }
          },
          "404": {
            "description": "Supplier or relationship not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "code": 404
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Retrieve a list of users with optional filtering by various parameters",
        "operationId": "getUsers",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query to filter users by name or email",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "john"
          },
          {
            "name": "role_id",
            "in": "query",
            "description": "Filter by role ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 2
          },
          {
            "name": "org_id",
            "in": "query",
            "description": "Filter by organization ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filter by email address (partial match)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "example.com"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name (partial match)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "John"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related entities",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "organization,role"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create user",
        "description": "Create a new user with the provided data",
        "operationId": "createUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "User object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "description": "Retrieve detailed information about a specific user",
        "operationId": "getUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "USR-1234"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Update a user with the provided data",
        "operationId": "updateUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "USR-1234"
          }
        ],
        "requestBody": {
          "description": "User data that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Delete a user by ID",
        "operationId": "deleteUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "USR-1234"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Cannot delete yourself or users with equal/higher permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  }
}