{
  "openapi": "3.0.3",
  "info": {
    "title": "Launchpad API",
    "description": "API documentation for the Launchpad application",
    "version": "1.0.0",
    "contact": {
      "email": "support@launchpad.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication endpoints for login, logout and profile access"
    },
    {
      "name": "Items",
      "description": "Item management endpoints with optional filtering, search, and maintenance operations"
    },
    {
      "name": "Locations",
      "description": "Location management endpoints for organizing items in hierarchical storage structures"
    },
    {
      "name": "Organizations",
      "description": "Organization management endpoints for creating, accessing, and managing organizational data"
    },
    {
      "name": "Users",
      "description": "User management endpoints with role-based access control and organization filtering"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/UserProfile"
              },
              "access_token": {
                "type": "string",
                "description": "Encrypted token that needs to be decrypted",
                "example": "eyJpdiI6Im0zSlZuTVZHd0R2dGIrUGJMcEp..."
              },
              "token_type": {
                "type": "string",
                "example": "Bearer"
              }
            }
          },
          "message": {
            "type": "string",
            "example": "Login successful"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "null"
          },
          "message": {
            "type": "string",
            "example": "Logout successful"
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "email_verified_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2025-06-01T10:00:00Z"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-01T00:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-01T10:00:00Z"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "create_items",
              "view_items"
            ]
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "User"
                }
              }
            }
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "example": null
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ITM-1234"
          },
          "name": {
            "type": "string",
            "example": "HP Laptop"
          },
          "code": {
            "type": "string",
            "example": "LPT-001"
          },
          "barcode": {
            "type": "string",
            "example": "1234567890"
          },
          "type": {
            "type": "string",
            "enum": [
              "abstract",
              "bulk",
              "serialized"
            ],
            "example": "serialized",
            "description": "Alias for tracking_mode, indicates how the item is tracked"
          },
          "description": {
            "type": "string",
            "example": "HP ProBook 450 G8 Business Laptop"
          },
          "tracking_mode": {
            "type": "string",
            "enum": [
              "abstract",
              "bulk",
              "serialized"
            ],
            "example": "serialized",
            "description": "Abstract: No tracking, Bulk: Track by quantity, Serialized: Track individual items"
          },
          "price": {
            "type": "number",
            "format": "float",
            "example": 999.99
          },
          "serial_number": {
            "type": "string",
            "example": "SN12345678",
            "description": "Required for serialized items"
          },
          "notes": {
            "type": "string",
            "example": "Purchased for marketing department"
          },
          "specifications": {
            "type": "object",
            "example": {
              "cpu": "Intel Core i7",
              "ram": "16GB",
              "storage": "512GB SSD"
            }
          },
          "org_id": {
            "type": "integer",
            "example": 1
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          },
          "in_maintenance": {
            "type": "boolean",
            "example": false,
            "description": "Whether the item is currently in maintenance"
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "total_quantity": {
            "type": "integer",
            "example": 10,
            "description": "Sum of quantities across all locations"
          },
          "supplier_count": {
            "type": "integer",
            "example": 2,
            "description": "Number of suppliers for this item"
          },
          "organization": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "ORG-123"
              },
              "name": {
                "type": "string",
                "example": "Acme Inc."
              }
            }
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "CAT-123"
              },
              "name": {
                "type": "string",
                "example": "Electronics"
              }
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "STS-123"
              },
              "name": {
                "type": "string",
                "example": "Available"
              }
            }
          },
          "unit_of_measure": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Each"
              },
              "symbol": {
                "type": "string",
                "example": "ea"
              }
            }
          },
          "suppliers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "SUP-123"
                },
                "name": {
                  "type": "string",
                  "example": "HP Distributors"
                },
                "is_preferred": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "LOC-123"
                },
                "name": {
                  "type": "string",
                  "example": "Main Warehouse"
                },
                "code": {
                  "type": "string",
                  "example": "WH-001"
                },
                "quantity": {
                  "type": "integer",
                  "example": 5
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2025-06-16T10:00:00Z"
                }
              }
            }
          }
        }
      },
      "ItemCollection": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "message": {
            "type": "string",
            "example": "Resources retrieved successfully"
          }
        }
      },
      "ItemSingle": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/Item"
          },
          "message": {
            "type": "string",
            "example": "Resource retrieved successfully"
          }
        }
      },
      "ItemRequest": {
        "type": "object",
        "required": [
          "name",
          "code",
          "tracking_mode",
          "unit_id",
          "org_id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "HP Laptop",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "example": "LPT-001",
            "maxLength": 50
          },
          "barcode": {
            "type": "string",
            "example": "1234567890",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "example": "HP ProBook 450 G8 Business Laptop",
            "maxLength": 1000
          },
          "tracking_mode": {
            "type": "string",
            "enum": [
              "abstract",
              "bulk",
              "serialized"
            ],
            "example": "serialized"
          },
          "unit_id": {
            "type": "integer",
            "example": 1
          },
          "price": {
            "type": "number",
            "format": "float",
            "example": 999.99,
            "minimum": 0,
            "maximum": 999999.99
          },
          "serial_number": {
            "type": "string",
            "example": "SN12345678",
            "maxLength": 255
          },
          "category_id": {
            "type": "integer",
            "example": 1
          },
          "status_id": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "specifications": {
            "type": "object",
            "example": {
              "cpu": "Intel Core i7",
              "ram": "16GB",
              "storage": "512GB SSD"
            }
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "org_id": {
            "type": "integer",
            "example": 1
          },
          "parent_item_id": {
            "type": "integer",
            "example": 10
          },
          "item_relation_id": {
            "type": "integer",
            "example": 20
          },
          "notes": {
            "type": "string",
            "example": "Purchased for marketing department",
            "maxLength": 1000
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "LOC-123"
                },
                "quantity": {
                  "type": "integer",
                  "example": 5,
                  "minimum": 0
                }
              }
            }
          }
        }
      },
      "MaintenanceRequest": {
        "type": "object",
        "required": [
          "action"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "example": "in",
            "description": "'in' sends item to maintenance, 'out' returns it from maintenance"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z",
            "description": "Date of the maintenance action. Defaults to current timestamp if not provided."
          },
          "remarks": {
            "type": "string",
            "example": "Display screen flickering",
            "description": "Notes about the maintenance operation"
          },
          "is_repair": {
            "type": "boolean",
            "example": true,
            "description": "Whether this maintenance is a repair. Defaults to false if not provided.",
            "default": false
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Resource not found"
          },
          "errors": {
            "type": "object",
            "example": {
              "email": [
                "The email has already been taken."
              ],
              "password": [
                "The password confirmation does not match."
              ]
            }
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique location identifier",
            "example": "loc_abc123"
          },
          "name": {
            "type": "string",
            "description": "Location name",
            "example": "Main Warehouse"
          },
          "code": {
            "type": "string",
            "description": "Location code for easy identification and sorting",
            "example": "WH-MAIN"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Detailed location description",
            "example": "Primary storage facility for all products and components"
          },
          "path": {
            "type": "string",
            "description": "Hierarchical path showing the location's position in the tree structure",
            "example": "/loc_abc123/loc_def456/"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the location is currently active and available for use",
            "example": true
          },
          "parent_id": {
            "type": "string",
            "nullable": true,
            "description": "Parent location ID (null for root/top-level locations)",
            "example": "loc_parent123"
          },
          "organization": {
            "type": "object",
            "description": "Organization this location belongs to",
            "properties": {
              "id": {
                "type": "string",
                "example": "org_xyz789"
              },
              "name": {
                "type": "string",
                "example": "ACME Corporation"
              }
            }
          },
          "parent": {
            "type": "object",
            "nullable": true,
            "description": "Parent location details (null for root locations)",
            "properties": {
              "id": {
                "type": "string",
                "example": "loc_parent123"
              },
              "name": {
                "type": "string",
                "example": "Main Building"
              },
              "code": {
                "type": "string",
                "example": "MB-01"
              },
              "path": {
                "type": "string",
                "example": "/loc_parent123/"
              }
            }
          },
          "children": {
            "type": "array",
            "description": "Direct child locations (first level only)",
            "items": {
              "$ref": "#/components/schemas/LocationSummary"
            }
          },
          "childrenRecursive": {
            "type": "array",
            "description": "All nested child locations recursively (complete hierarchy)",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "items": {
            "type": "array",
            "description": "Items stored in this location (when included with ?with=items)",
            "items": {
              "$ref": "#/components/schemas/ItemSummary"
            }
          },
          "items_count": {
            "type": "integer",
            "description": "Total number of items stored in this location",
            "example": 45
          },
          "attachments": {
            "type": "array",
            "description": "Files and documents attached to this location",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Location creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "path",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "LocationWithHierarchy": {
        "type": "object",
        "description": "Location with complete hierarchical children structure",
        "allOf": [
          {
            "$ref": "#/components/schemas/Location"
          },
          {
            "type": "object",
            "properties": {
              "childrenRecursive": {
                "type": "array",
                "description": "Complete nested hierarchy of all child locations",
                "items": {
                  "$ref": "#/components/schemas/LocationWithHierarchy"
                }
              }
            }
          }
        ]
      },
      "LocationCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Location name (must be unique within the organization)",
            "minLength": 1,
            "maxLength": 255,
            "example": "Main Warehouse"
          },
          "code": {
            "type": "string",
            "description": "Location code for identification (must be unique within the organization)",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[A-Z0-9_-]+$",
            "example": "WH-MAIN"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional detailed description of the location",
            "maxLength": 1000,
            "example": "Primary storage facility for all products and electronic components"
          },
          "parent_id": {
            "type": "string",
            "nullable": true,
            "description": "Parent location ID (null for root/top-level locations). Must be an existing location ID.",
            "example": "loc_parent123"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the location should be active upon creation",
            "default": true,
            "example": true
          }
        },
        "required": [
          "name",
          "code"
        ],
        "example": {
          "name": "Electronics Section",
          "code": "WH-MAIN-ELEC",
          "description": "Dedicated area for electronic components and devices",
          "parent_id": "loc_abc123",
          "is_active": true
        }
      },
      "LocationUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated location name (must be unique within the organization)",
            "minLength": 1,
            "maxLength": 255,
            "example": "Renovated Main Warehouse"
          },
          "code": {
            "type": "string",
            "description": "Updated location code (must be unique within the organization)",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[A-Z0-9_-]+$",
            "example": "WH-MAIN-RENOVATED"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Updated location description",
            "maxLength": 1000,
            "example": "Newly renovated and expanded primary storage facility"
          },
          "parent_id": {
            "type": "string",
            "nullable": true,
            "description": "New parent location ID (null to make it a root location). Changing this will recalculate the hierarchical path.",
            "example": "loc_new_parent456"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the location should be active. Deactivating a location may affect item accessibility.",
            "example": true
          }
        },
        "example": {
          "name": "Expanded Electronics Warehouse",
          "description": "Newly expanded warehouse dedicated to electronic components",
          "is_active": true
        }
      },
      "LocationSummary": {
        "type": "object",
        "description": "Simplified location information for references and listings",
        "properties": {
          "id": {
            "type": "string",
            "description": "Location identifier",
            "example": "loc_abc123"
          },
          "name": {
            "type": "string",
            "description": "Location name",
            "example": "Main Warehouse"
          },
          "code": {
            "type": "string",
            "description": "Location code",
            "example": "WH-MAIN"
          },
          "path": {
            "type": "string",
            "description": "Hierarchical path",
            "example": "/loc_abc123/"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the location is active",
            "example": true
          },
          "items_count": {
            "type": "integer",
            "description": "Number of items in this location",
            "example": 25
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "path",
          "is_active"
        ]
      },
      "LocationHierarchyFlat": {
        "type": "object",
        "description": "Flattened location data without nested children",
        "properties": {
          "id": {
            "type": "string",
            "description": "Location identifier",
            "example": "loc_abc123"
          },
          "name": {
            "type": "string",
            "description": "Location name",
            "example": "Main Warehouse"
          },
          "code": {
            "type": "string",
            "description": "Location code",
            "example": "WH-MAIN"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Location description",
            "example": "Primary storage facility"
          },
          "path": {
            "type": "string",
            "description": "Hierarchical path",
            "example": "/loc_abc123/"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the location is active",
            "example": true
          },
          "parent_id": {
            "type": "string",
            "nullable": true,
            "description": "Parent location ID",
            "example": "loc_parent123"
          },
          "level": {
            "type": "integer",
            "description": "Hierarchy level (0 for root, 1 for first level children, etc.)",
            "example": 1
          },
          "items_count": {
            "type": "integer",
            "description": "Number of items in this location",
            "example": 45
          },
          "children_count": {
            "type": "integer",
            "description": "Number of direct child locations",
            "example": 3
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "path",
          "is_active",
          "level",
          "items_count",
          "children_count"
        ]
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ORG-123"
          },
          "name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "contact@acme.com"
          },
          "telephone": {
            "type": "string",
            "example": "+1-555-123-4567"
          },
          "address": {
            "type": "string",
            "example": "123 Corporate Drive, Business City"
          },
          "website": {
            "type": "string",
            "format": "uri",
            "example": "https://www.acme.com"
          },
          "remarks": {
            "type": "string",
            "example": "Main corporate headquarters"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          }
        }
      },
      "OrganizationCollection": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "message": {
            "type": "string",
            "example": "Resources retrieved successfully"
          }
        }
      },
      "OrganizationSingle": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/Organization"
          },
          "message": {
            "type": "string",
            "example": "Resource retrieved successfully"
          }
        }
      },
      "OrganizationRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Acme Corporation",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "contact@acme.com",
            "maxLength": 255
          },
          "telephone": {
            "type": "string",
            "example": "+1-555-123-4567",
            "maxLength": 50
          },
          "address": {
            "type": "string",
            "example": "123 Corporate Drive, Business City",
            "maxLength": 255
          },
          "website": {
            "type": "string",
            "format": "uri",
            "example": "https://www.acme.com",
            "maxLength": 255
          },
          "remarks": {
            "type": "string",
            "example": "Main corporate headquarters"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "USR-1234"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "full_name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "role": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "ROL-123"
              },
              "slug": {
                "type": "string",
                "example": "manager"
              },
              "title": {
                "type": "string",
                "example": "Manager"
              },
              "forbidden": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "users.delete"
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-16T10:00:00Z"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-16T10:00:00Z"
              }
            }
          },
          "is_super_admin": {
            "type": "boolean",
            "example": false
          },
          "is_manager": {
            "type": "boolean",
            "example": true
          },
          "is_employee": {
            "type": "boolean",
            "example": false
          },
          "is_admin": {
            "type": "boolean",
            "example": true
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "organization": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "ORG-123"
              },
              "name": {
                "type": "string",
                "example": "Acme Inc."
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-16T10:00:00Z"
          }
        }
      },
      "UserCollection": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "message": {
            "type": "string",
            "example": "Users retrieved successfully"
          }
        }
      },
      "UserSingle": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/User"
          },
          "message": {
            "type": "string",
            "example": "User retrieved successfully"
          }
        }
      },
      "UserRequest": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password",
          "password_confirmation"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com",
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "Password123!",
            "minLength": 8
          },
          "password_confirmation": {
            "type": "string",
            "format": "password",
            "example": "Password123!"
          },
          "role_id": {
            "type": "integer",
            "example": 2
          },
          "org_id": {
            "type": "integer",
            "example": 1
          },
          "is_active": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com",
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "NewPassword123!",
            "minLength": 8
          },
          "password_confirmation": {
            "type": "string",
            "format": "password",
            "example": "NewPassword123!"
          },
          "role_id": {
            "type": "integer",
            "example": 2
          },
          "org_id": {
            "type": "integer",
            "example": 1
          },
          "is_active": {
            "type": "boolean",
            "example": true
          }
        }
      }
    }
  },
  "paths": {
    "/api/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "description": "Login with email and password to get an encrypted Bearer token.",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "description": "Revokes the current access token",
        "operationId": "logout",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get user profile",
        "description": "Returns information about the currently authenticated user",
        "operationId": "getUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/UserProfile"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get all items",
        "description": "Retrieve a list of items with optional filtering by various parameters",
        "operationId": "getItems",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query to filter items by name, code, description, or serial number",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "laptop"
          },
          {
            "name": "scannable",
            "in": "query",
            "description": "Scan code to find items by barcode, serial number, or code (exact match)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "1234567890"
          },
          {
            "name": "tracking_mode",
            "in": "query",
            "description": "Filter by tracking mode",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "abstract",
                "bulk",
                "serialized"
              ]
            },
            "example": "serialized"
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Filter by category ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "location_id",
            "in": "query",
            "description": "Filter by location ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "org_id",
            "in": "query",
            "description": "Filter by organization ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name (partial match)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "laptop"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Filter by code (partial match)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "LPT"
          },
          {
            "name": "barcode",
            "in": "query",
            "description": "Filter by exact barcode match",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "1234567890"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related entities (comma-separated list)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "category,status,locations,organization,unitOfMeasure,suppliers",
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Create item",
        "description": "Create a new item",
        "operationId": "createItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Item object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get item by ID",
        "description": "Retrieve detailed information about a specific item",
        "operationId": "getItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ITM-1234"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related entities (comma-separated list)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "category,status,locations,organization,unitOfMeasure,suppliers",
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Items"
        ],
        "summary": "Update item",
        "description": "Update an item with the provided data",
        "operationId": "updateItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ITM-1234"
          }
        ],
        "requestBody": {
          "description": "Item data that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete an item",
        "description": "Delete an item by ID",
        "operationId": "deleteItem",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ITM-1234"
          }
        ],
        "responses": {
          "204": {
            "description": "Item deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{id}/maintenance/toggle": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Toggle maintenance",
        "description": "Send an item to maintenance or return it from maintenance",
        "operationId": "toggleItemMaintenance",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ITM-1234"
          }
        ],
        "requestBody": {
          "description": "Maintenance toggle information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Maintenance status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get all locations",
        "description": "Retrieve all locations with advanced filtering and optional hierarchical view. Supports searching by name, code, description, active status, and parent relationships. By default returns hierarchical structure with nested children.",
        "operationId": "getLocations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "hierarchy",
            "in": "query",
            "description": "Return locations in hierarchical structure (true) or flat list (false). Hierarchical view shows nested parent-child relationships.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by location name (partial match, case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Warehouse"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Filter by location code (partial match, case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "WH-"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Filter by location description (partial match, case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "storage"
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status. Use 'true' for active, 'false' for inactive locations.",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "parent_id",
            "in": "query",
            "description": "Filter by parent location ID. Use 'null' to get root locations (no parent).",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "loc_abc123"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related data (comma-separated). Available: parent, children, childrenRecursive, organization, items, attachments",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "parent,children,organization,items"
          }
        ],
        "responses": {
          "200": {
            "description": "Locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Location"
                      }
                    }
                  }
                },
                "examples": {
                  "hierarchical": {
                    "summary": "Hierarchical locations with nested children",
                    "value": {
                      "status": "success",
                      "message": "Success",
                      "data": [
                        {
                          "id": "loc_abc123",
                          "name": "Main Warehouse",
                          "code": "WH-MAIN",
                          "description": "Primary storage facility for all products",
                          "path": "/loc_abc123/",
                          "is_active": true,
                          "parent_id": null,
                          "organization": {
                            "id": "org_xyz789",
                            "name": "ACME Corporation"
                          },
                          "childrenRecursive": [
                            {
                              "id": "loc_def456",
                              "name": "Electronics Section",
                              "code": "WH-MAIN-ELEC",
                              "description": "Dedicated area for electronic components",
                              "path": "/loc_abc123/loc_def456/",
                              "is_active": true,
                              "parent_id": "loc_abc123",
                              "childrenRecursive": [
                                {
                                  "id": "loc_ghi789",
                                  "name": "Shelf A1",
                                  "code": "WH-MAIN-ELEC-A1",
                                  "description": "Top shelf for small electronics",
                                  "path": "/loc_abc123/loc_def456/loc_ghi789/",
                                  "is_active": true,
                                  "parent_id": "loc_def456",
                                  "childrenRecursive": [],
                                  "items_count": 25
                                }
                              ],
                              "items_count": 45
                            }
                          ],
                          "items_count": 120,
                          "created_at": "2024-01-15T10:30:00Z",
                          "updated_at": "2024-01-15T10:30:00Z"
                        }
                      ]
                    }
                  },
                  "filtered": {
                    "summary": "Filtered locations by active status",
                    "value": {
                      "status": "success",
                      "message": "Success",
                      "data": [
                        {
                          "id": "loc_abc123",
                          "name": "Main Warehouse",
                          "code": "WH-MAIN",
                          "description": "Primary storage facility",
                          "path": "/loc_abc123/",
                          "is_active": true,
                          "parent_id": null,
                          "items_count": 120,
                          "created_at": "2024-01-15T10:30:00Z",
                          "updated_at": "2024-01-15T10:30:00Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unknown query parameter: invalid_param"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Unknown query parameter: invalid_param",
                  "data": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Unauthorized",
                  "data": null
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "User must belong to an organization"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "data": null
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Create a new location",
        "description": "Create a new location in the organization. Supports hierarchical structure by specifying parent_id. The system automatically generates the path based on the hierarchy.",
        "operationId": "createLocation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationCreateRequest"
              },
              "examples": {
                "root_location": {
                  "summary": "Root level warehouse",
                  "value": {
                    "name": "Main Warehouse",
                    "code": "WH-MAIN",
                    "description": "Primary storage facility for all products",
                    "parent_id": null,
                    "is_active": true
                  }
                },
                "child_location": {
                  "summary": "Child location within warehouse",
                  "value": {
                    "name": "Electronics Section",
                    "code": "WH-MAIN-ELEC",
                    "description": "Dedicated area for electronic components and devices",
                    "parent_id": "loc_abc123",
                    "is_active": true
                  }
                },
                "nested_location": {
                  "summary": "Deeply nested storage location",
                  "value": {
                    "name": "Shelf A1",
                    "code": "WH-MAIN-ELEC-A1",
                    "description": "Top shelf for small electronic components",
                    "parent_id": "loc_def456",
                    "is_active": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Location created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Location"
                    }
                  }
                },
                "examples": {
                  "created_location": {
                    "summary": "Newly created location",
                    "value": {
                      "status": "success",
                      "message": "Resource created successfully",
                      "data": {
                        "id": "loc_new123",
                        "name": "Electronics Section",
                        "code": "WH-MAIN-ELEC",
                        "description": "Dedicated area for electronic components",
                        "path": "/loc_abc123/loc_new123/",
                        "is_active": true,
                        "parent_id": "loc_abc123",
                        "parent": {
                          "id": "loc_abc123",
                          "name": "Main Warehouse",
                          "code": "WH-MAIN"
                        },
                        "organization": {
                          "id": "org_xyz789",
                          "name": "ACME Corporation"
                        },
                        "items_count": 0,
                        "created_at": "2024-01-16T14:20:00Z",
                        "updated_at": "2024-01-16T14:20:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Empty data or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Data cannot be empty"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Data cannot be empty",
                  "data": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Unauthorized",
                  "data": null
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "User must belong to an organization"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "User must belong to an organization",
                  "data": null
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "The given data was invalid."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "The location name is required and cannot be empty"
                          ]
                        },
                        "code": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "This location code already exists in your organization"
                          ]
                        },
                        "parent_id": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "The selected parent location does not exist in your organization"
                          ]
                        }
                      }
                    }
                  }
                },
                "example": {
                  "message": "The given data was invalid."
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get location by ID",
        "description": "Retrieve a specific location with its details and hierarchical children. Automatically loads the complete hierarchy including all nested children.",
        "operationId": "getLocationById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "loc_abc123"
          }
        ],
        "responses": {
          "200": {
            "description": "Location retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/LocationWithHierarchy"
                    }
                  }
                },
                "examples": {
                  "location_with_hierarchy": {
                    "summary": "Location with complete hierarchy",
                    "value": {
                      "status": "success",
                      "message": "Resource retrieved successfully",
                      "data": {
                        "id": "loc_abc123",
                        "name": "Main Warehouse",
                        "code": "WH-MAIN",
                        "description": "Primary storage facility for all products",
                        "path": "/loc_abc123/",
                        "is_active": true,
                        "parent_id": null,
                        "organization": {
                          "id": "org_xyz789",
                          "name": "ACME Corporation"
                        },
                        "parent": null,
                        "childrenRecursive": [
                          {
                            "id": "loc_def456",
                            "name": "Electronics Section",
                            "code": "WH-MAIN-ELEC",
                            "description": "Electronic components area",
                            "path": "/loc_abc123/loc_def456/",
                            "is_active": true,
                            "parent_id": "loc_abc123",
                            "childrenRecursive": [
                              {
                                "id": "loc_ghi789",
                                "name": "Shelf A1",
                                "code": "WH-MAIN-ELEC-A1",
                                "description": "Top shelf for small electronics",
                                "path": "/loc_abc123/loc_def456/loc_ghi789/",
                                "is_active": true,
                                "parent_id": "loc_def456",
                                "childrenRecursive": [],
                                "items_count": 25
                              }
                            ],
                            "items_count": 45
                          }
                        ],
                        "items_count": 120,
                        "attachments": [],
                        "created_at": "2024-01-15T10:30:00Z",
                        "updated_at": "2024-01-15T10:30:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Unauthorized",
                  "data": null
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization or trying to access other organization's resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Trying to access other organization resources is not allowed, this action has been logged for security purposes"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Trying to access other organization resources is not allowed, this action has been logged for security purposes",
                  "data": null
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Location does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "data": null
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Locations"
        ],
        "summary": "Update location",
        "description": "Update an existing location's information. Supports partial updates. When changing parent_id, the system automatically recalculates the hierarchical path.",
        "operationId": "updateLocation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "loc_abc123"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationUpdateRequest"
              },
              "examples": {
                "name_update": {
                  "summary": "Update location name only",
                  "value": {
                    "name": "Renovated Main Warehouse"
                  }
                },
                "deactivate": {
                  "summary": "Deactivate location",
                  "value": {
                    "is_active": false
                  }
                },
                "move_location": {
                  "summary": "Move location to different parent",
                  "value": {
                    "parent_id": "loc_new_parent456"
                  }
                },
                "promote_to_root": {
                  "summary": "Make location a root location",
                  "value": {
                    "parent_id": null
                  }
                },
                "full_update": {
                  "summary": "Update multiple fields",
                  "value": {
                    "name": "Expanded Electronics Warehouse",
                    "code": "WH-ELEC-EXP",
                    "description": "Expanded warehouse dedicated to electronic components and devices",
                    "is_active": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Location"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Empty data or invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Data cannot be empty"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Data cannot be empty",
                  "data": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Unauthorized",
                  "data": null
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization or trying to access other organization's resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Trying to access other organization resources is not allowed, this action has been logged for security purposes"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Trying to access other organization resources is not allowed, this action has been logged for security purposes",
                  "data": null
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Location does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "data": null
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "The given data was invalid."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "The location name cannot exceed 255 characters"
                          ]
                        },
                        "code": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "This location code already exists in your organization"
                          ]
                        },
                        "parent_id": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "The selected parent location does not exist in your organization"
                          ]
                        }
                      }
                    }
                  }
                },
                "example": {
                  "message": "The given data was invalid.",
                  "errors": {
                    "name": [
                      "The location name is required and cannot be empty"
                    ],
                    "code": [
                      "This location code already exists in your organization"
                    ],
                    "parent_id": [
                      "The selected parent location does not exist in your organization"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "summary": "Delete location",
        "description": "Delete a location from the system. Important: If the location has child locations, they will automatically become top-level locations (orphaned). Items in this location will become unassigned and may need to be relocated.",
        "operationId": "deleteLocation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "loc_abc123"
          }
        ],
        "responses": {
          "200": {
            "description": "Location deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource deleted successfully"
                    },
                    "warning": {
                      "type": "string",
                      "description": "Warning message if location had children",
                      "example": "Warning: Deleting a location with child locations. Child locations will become top-level locations."
                    }
                  }
                },
                "examples": {
                  "simple_delete": {
                    "summary": "Delete location without children",
                    "value": {
                      "success": true,
                      "message": "Resource deleted successfully"
                    }
                  },
                  "delete_with_children": {
                    "summary": "Delete location with child locations",
                    "value": {
                      "success": true,
                      "message": "Resource deleted successfully",
                      "warning": "Warning: Deleting a location with child locations. Child locations will become top-level locations."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Unauthorized",
                  "data": null
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User must belong to an organization or trying to access other organization's resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Trying to access other organization resources is not allowed, this action has been logged for security purposes"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Trying to access other organization resources is not allowed, this action has been logged for security purposes",
                  "data": null
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Location does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Resource not found",
                  "data": null
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Location cannot be deleted due to dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Cannot delete resource as it is currently in use"
                    },
                    "data": {
                      "type": "null",
                      "example": null
                    }
                  }
                },
                "example": {
                  "status": "error",
                  "message": "Cannot delete resource as it is currently in use",
                  "data": null
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get all organizations",
        "description": "Get all organizations accessible to the user. Regular users can only see their own organization, while super admins can see all.",
        "operationId": "getOrganizations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "with",
            "in": "query",
            "description": "Include related entities (comma-separated list)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "users,items,locations",
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create a new organization",
        "description": "Create a new organization. This action requires super admin privileges.",
        "operationId": "createOrganization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Organization object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - requires super admin privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/active": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get active organizations",
        "description": "Get all active organizations. Regular users can only see their own organization if active, while super admins can see all active organizations.",
        "operationId": "getActiveOrganizations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{id}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get organization by ID",
        "description": "Get a specific organization by ID. Regular users can only access their own organization.",
        "operationId": "getOrganization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ORG-123"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related entities (comma-separated list)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "users,items,locations",
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - not authorized to view this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update an organization",
        "description": "Update an existing organization. This action requires super admin privileges.",
        "operationId": "updateOrganization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ORG-123"
          }
        ],
        "requestBody": {
          "description": "Organization data that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - requires super admin privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete an organization",
        "description": "Delete an organization by ID. This action requires super admin privileges.",
        "operationId": "deleteOrganization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ORG-123"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - requires super admin privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Retrieve a list of users with optional filtering by various parameters",
        "operationId": "getUsers",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query to filter users by name or email",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "john"
          },
          {
            "name": "role_id",
            "in": "query",
            "description": "Filter by role ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 2
          },
          {
            "name": "org_id",
            "in": "query",
            "description": "Filter by organization ID",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filter by email address (partial match)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "example.com"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name (partial match)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "John"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Include related entities",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "organization,role"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create user",
        "description": "Create a new user with the provided data",
        "operationId": "createUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "User object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "description": "Retrieve detailed information about a specific user",
        "operationId": "getUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "USR-1234"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Update a user with the provided data",
        "operationId": "updateUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "USR-1234"
          }
        ],
        "requestBody": {
          "description": "User data that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSingle"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Delete a user by ID",
        "operationId": "deleteUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID (public ID format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "USR-1234"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Cannot delete yourself or users with equal/higher permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  }
}