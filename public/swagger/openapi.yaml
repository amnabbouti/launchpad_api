openapi: 3.0.0
info:
  title: Inventory Management API
  description: |
    REST API for managing inventory items, locations, categories, and suppliers.

    ## Features
    - Manage inventory items with categories
    - Track item locations and quantities
    - Organize locations in hierarchical structure
    - Manage suppliers and item-supplier relationships
    - Track supplier-specific item details like pricing and lead times
    - Full CRUD operations for all resources


    **How to authenticate:**
    1. Click on authentication in the right side of the page
    2. In the popup dialog, enter your token in the input field

    Once Entered all API requests will automatically include your authentication token.

  version: 1.0.0
  contact:
    name: API Support
    email: support@inventory-api.com
servers:
  - url: /api
    description: API Base URL
security:
  - bearerAuth: []
tags:
  - name: Authentication
    description: Operations related to user authentication
  - name: Items
    description: Operations for managing inventory items, including creation, retrieval, updating, and deletion.
  - name: Categories
    description: managing categories of items, including creation, retrieval, updating, and deletion.
  - name: Locations
    description: management of item locations, including creation, retrieval, updating, and deletion.
  - name: Suppliers
    description: Operations for managing item suppliers, including creation, retrieval, updating, and deletion.
  - name: Users
    description: Operations for managing system users, including creation, retrieval, updating, and deletion.
  - name: Stocks
    description: Operations for managing stock levels, including creation, retrieval, updating, and deletion.
  - name: Units of Measure
    description: Operations for managing units of measurement, including creation, retrieval, updating, and deletion.
paths:
  /login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user and get access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                      user:
                        $ref: '#/components/schemas/User'
                  meta:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Login successful
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /items:
    get:
      tags:
        - Items
      summary: Get all items
      description: Retrieve a list of all inventory items with optional filtering
      parameters:
        - name: category_id
          in: query
          description: Filter items by category ID
          schema:
            type: integer
        - name: user_id
          in: query
          description: Filter items by user ID
          schema:
            type: integer
        - name: active
          in: query
          description: Filter items by active status
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsResponse'
    post:
      tags:
        - Items
      summary: Create a new item
      description: Add a new item to the inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequest'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /items/{id}:
    get:
      tags:
        - Items
      summary: Get a specific item
      description: Retrieve details of a specific item by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the item to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Items
      summary: Update an item
      description: Update an existing item's information
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the item to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequest'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Items
      summary: Delete an item
      description: Remove an item from the inventory
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the item to delete
          schema:
            type: integer
      responses:
        '200':
          description: Item deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Retrieve a list of all categories with item counts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'
    post:
      tags:
        - Categories
      summary: Create a new category
      description: Add a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get a specific category
      description: Retrieve details of a specific category by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Categories
      summary: Update a category
      description: Update an existing category's information
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Categories
      summary: Delete a category
      description: Remove a category (only if it has no associated items)
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to delete
          schema:
            type: integer
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Cannot delete category with associated items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations:
    get:
      tags:
        - Locations
      summary: Get all locations
      description: Retrieve a list of all locations
      parameters:
        - name: active
          in: query
          description: Filter locations by active status
          schema:
            type: boolean
        - name: per_page
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 15
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationsResponse'
    post:
      tags:
        - Locations
      summary: Create a new location
      description: Add a new storage location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationRequest'
      responses:
        '201':
          description: Location created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /locations/{id}:
    get:
      tags:
        - Locations
      summary: Get a specific location
      description: Retrieve details of a specific location by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the location to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '404':
          description: Location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Locations
      summary: Update a location
      description: Update an existing location's information
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the location to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationRequest'
      responses:
        '200':
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        '404':
          description: Location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Locations
      summary: Delete a location
      description: Remove a location (only if it has no child locations)
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the location to delete
          schema:
            type: integer
      responses:
        '200':
          description: Location deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Cannot delete location with child locations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /suppliers:
    get:
      tags:
        - Suppliers
      summary: Get all suppliers
      description: Retrieve a list of all suppliers with optional filtering
      parameters:
        - name: active
          in: query
          description: Filter suppliers by active status
          schema:
            type: boolean
        - name: search
          in: query
          description: Search suppliers by name, code, contact name or email
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuppliersResponse'
    post:
      tags:
        - Suppliers
      summary: Create a new supplier
      description: Add a new supplier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplierRequest'
      responses:
        '201':
          description: Supplier created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /suppliers/{id}:
    get:
      tags:
        - Suppliers
      summary: Get a specific supplier
      description: Retrieve details of a specific supplier by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the supplier to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierResponse'
        '404':
          description: Supplier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Suppliers
      summary: Update a supplier
      description: Update an existing supplier's information
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the supplier to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplierRequest'
      responses:
        '200':
          description: Supplier updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierResponse'
        '404':
          description: Supplier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Suppliers
      summary: Delete a supplier
      description: Remove a supplier
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the supplier to delete
          schema:
            type: integer
      responses:
        '200':
          description: Supplier deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Supplier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users with optional filtering
      parameters:
        - name: role
          in: query
          description: Filter users by role
          schema:
            type: string
        - name: active
          in: query
          description: Filter users by active status
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
    post:
      tags:
        - Users
      summary: Create a new user
      description: Add a new user to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a specific user
      description: Retrieve details of a specific user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Update a user
      description: Update an existing user's information
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Users
      summary: Delete a user
      description: Remove a user from the system
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/role/{role}:
    get:
      tags:
        - Users
      summary: Get users by role
      description: Retrieve all users with a specific role
      parameters:
        - name: role
          in: path
          required: true
          description: Role to filter users by
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
  /users/with-items:
    get:
      tags:
        - Users
      summary: Get users with items
      description: Retrieve all users who have items assigned to them
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
  /users/active:
    get:
      tags:
        - Users
      summary: Get active users
      description: Retrieve all active users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
  /stocks:
    get:
      tags:
        - Stocks
      summary: Get all stocks
      description: Retrieve a list of all stocks
      parameters:
        - name: active
          in: query
          description: Filter stocks by active status
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StocksResponse'
    post:
      tags:
        - Stocks
      summary: Create a new stock
      description: Add a new stock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockRequest'
      responses:
        '201':
          description: Stock created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /stocks/{id}:
    get:
      tags:
        - Stocks
      summary: Get a specific stock
      description: Retrieve details of a specific stock by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the stock to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockResponse'
        '404':
          description: Stock not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Stocks
      summary: Update a stock
      description: Update an existing stock's information
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the stock to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockRequest'
      responses:
        '200':
          description: Stock updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockResponse'
        '404':
          description: Stock not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Stocks
      summary: Delete a stock
      description: Remove a stock
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the stock to delete
          schema:
            type: integer
      responses:
        '200':
          description: Stock deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Stock not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /stocks/with-items:
    get:
      tags:
        - Stocks
      summary: Get stocks with items
      description: Retrieve all stocks that have items
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StocksResponse'
  /stocks/active:
    get:
      tags:
        - Stocks
      summary: Get active stocks
      description: Retrieve all active stocks
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StocksResponse'
  /units-of-measure:
    get:
      tags:
        - Units of Measure
      summary: Get all units of measure
      description: Retrieve a list of all units of measure
      parameters:
        - name: active
          in: query
          description: Filter units by active status
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitsOfMeasureResponse'
    post:
      tags:
        - Units of Measure
      summary: Create a new unit of measure
      description: Add a new unit of measure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitOfMeasureRequest'
      responses:
        '201':
          description: Unit of measure created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitOfMeasureResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /units-of-measure/{id}:
    get:
      tags:
        - Units of Measure
      summary: Get a specific unit of measure
      description: Retrieve details of a specific unit of measure by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the unit of measure to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitOfMeasureResponse'
        '404':
          description: Unit of measure not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Units of Measure
      summary: Update a unit of measure
      description: Update an existing unit of measure's information
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the unit of measure to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitOfMeasureRequest'
      responses:
        '200':
          description: Unit of measure updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitOfMeasureResponse'
        '404':
          description: Unit of measure not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Units of Measure
      summary: Delete a unit of measure
      description: Remove a unit of measure
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the unit of measure to delete
          schema:
            type: integer
      responses:
        '200':
          description: Unit of measure deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Unit of measure not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /units-of-measure/name/{name}:
    get:
      tags:
        - Units of Measure
      summary: Get units of measure by name
      description: Retrieve units of measure by name
      parameters:
        - name: name
          in: path
          required: true
          description: Name to filter units of measure by
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitsOfMeasureResponse'
  /units-of-measure/active:
    get:
      tags:
        - Units of Measure
      summary: Get active units of measure
      description: Retrieve all active units of measure
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitsOfMeasureResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Laptop XPS 15
        code:
          type: string
          example: COMP-001
        description:
          type: string
          example: High performance laptop
        quantity:
          type: integer
          example: 10
        unit:
          type: string
          example: pcs
        price:
          type: number
          format: float
          example: 1299.99
        is_active:
          type: boolean
          example: true
        active:
          type: boolean
          example: true
        specifications:
          type: object
          example:
            { 'processor': 'Intel i7', 'ram': '16GB', 'storage': '512GB SSD' }
        category_id:
          type: integer
          example: 2
        user_id:
          type: integer
          nullable: true
          example: 1
        category:
          $ref: '#/components/schemas/Category'
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Electronics
        parent_id:
          type: integer
          nullable: true
          example: null
        items_count:
          type: integer
          example: 5
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        children:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              parent_id:
                type: integer
              items_count:
                type: integer
              children:
                type: array
                items:
                  type: object
    Location:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Main Warehouse
        code:
          type: string
          example: WH-MAIN
        parent_id:
          type: integer
          nullable: true
          example: null
        path:
          type: string
          example: '/1/'
          description: String for ancestry tracking (e.g. /1/3/5/)
        is_active:
          type: boolean
          example: true
        active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        children:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              code:
                type: string
              parent_id:
                type: integer
              path:
                type: string
              is_active:
                type: boolean
              active:
                type: boolean
              children:
                type: array
                items:
                  type: object
    InventoryRecord:
      type: object
      properties:
        id:
          type: integer
          example: 1
        item_id:
          type: integer
          example: 1
        location_id:
          type: integer
          example: 2
        quantity:
          type: integer
          example: 5
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        item_name:
          type: string
          example: Laptop XPS 15
        item_code:
          type: string
          example: COMP-001
        location_name:
          type: string
          example: Section A
        location_code:
          type: string
          example: WH-SEC-A
    ItemRequest:
      type: object
      properties:
        name:
          type: string
          example: Laptop XPS 15
        code:
          type: string
          example: COMP-001
        description:
          type: string
          example: High performance laptop
        quantity:
          type: integer
          example: 10
        unit:
          type: string
          example: pcs
        price:
          type: number
          format: float
          example: 1299.99
        category_id:
          type: integer
          example: 2
        user_id:
          type: integer
          nullable: true
          example: 1
        is_active:
          type: boolean
          example: true
        specifications:
          type: object
          example:
            { 'processor': 'Intel i7', 'ram': '16GB', 'storage': '512GB SSD' }
      required:
        - name
        - code
        - quantity
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
          example: Electronics
        parent_id:
          type: integer
          nullable: true
          example: null
      required:
        - name
    LocationRequest:
      type: object
      properties:
        name:
          type: string
          example: Main Warehouse
        code:
          type: string
          example: WH-MAIN
        parent_id:
          type: integer
          nullable: true
          example: null
        is_active:
          type: boolean
          example: true
      required:
        - name
        - code
    Supplier:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Tech Supplies Inc.
        code:
          type: string
          example: SUP-001
        contact_name:
          type: string
          example: John Smith
        email:
          type: string
          example: contact@techsupplies.com
        phone:
          type: string
          example: +1-555-123-4567
        address:
          type: string
          example: 123 Main Street
        city:
          type: string
          example: San Francisco
        state:
          type: string
          example: CA
        postal_code:
          type: string
          example: 94105
        country:
          type: string
          example: USA
        website:
          type: string
          example: https://techsupplies.com
        tax_id:
          type: string
          example: TX-12345678
        notes:
          type: string
          example: Preferred supplier for electronics
        is_active:
          type: boolean
          example: true
        active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemSupplierRelation'
    ItemSupplierRelation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        item_id:
          type: integer
          example: 5
        supplier_id:
          type: integer
          example: 1
        supplier_part_number:
          type: string
          example: SUP-PART-001
        price:
          type: number
          format: float
          example: 99.99
        lead_time:
          type: integer
          example: 3
          description: Lead time in days
        is_preferred:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        item:
          $ref: '#/components/schemas/Item'
    SupplierRequest:
      type: object
      properties:
        name:
          type: string
          example: Tech Supplies Inc.
        code:
          type: string
          example: SUP-001
        contact_name:
          type: string
          example: John Smith
        email:
          type: string
          example: contact@techsupplies.com
        phone:
          type: string
          example: +1-555-123-4567
        address:
          type: string
          example: 123 Main Street
        city:
          type: string
          example: San Francisco
        state:
          type: string
          example: CA
        postal_code:
          type: string
          example: 94105
        country:
          type: string
          example: USA
        website:
          type: string
          example: https://techsupplies.com
        tax_id:
          type: string
          example: TX-12345678
        notes:
          type: string
          example: Preferred supplier for electronics
        is_active:
          type: boolean
          example: true
      required:
        - name
    ItemSupplierRequest:
      type: object
      properties:
        supplier_part_number:
          type: string
          example: SUP-PART-001
        price:
          type: number
          format: float
          example: 99.99
        lead_time:
          type: integer
          example: 3
          description: Lead time in days
        is_preferred:
          type: boolean
          example: true
    ItemResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Item'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Item retrieved successfully
    ItemsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Items retrieved successfully
    CategoryResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Category'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Category retrieved successfully
    CategoriesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Categories retrieved successfully
    LocationResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Location'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Location retrieved successfully
    LocationsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Locations retrieved successfully
    InventoryRecordResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/InventoryRecord'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Inventory record retrieved successfully
    InventoryResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/InventoryRecord'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Inventory records retrieved successfully
    SupplierResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Supplier'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Supplier retrieved successfully
    SuppliersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Supplier'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Suppliers retrieved successfully
    SuccessResponse:
      type: object
      properties:
        data:
          type: null
          example: null
        meta:
          type: object
          properties:
            message:
              type: string
              example: Operation completed successfully
    Error:
      type: object
      properties:
        error:
          type: string
          example: Resource not found
    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: Validation failed
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            name: ['The name field is required.']
            code: ['The code field must be unique.']
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        role:
          type: string
          example: admin
        is_active:
          type: boolean
          example: true
        active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UserRequest:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: securepassword123
        role:
          type: string
          example: admin
        is_active:
          type: boolean
          example: true
      required:
        - name
        - email
        - password
    UserResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
        meta:
          type: object
          properties:
            message:
              type: string
              example: User retrieved successfully
    UsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Users retrieved successfully
    Stock:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Main Stock
        code:
          type: string
          example: STK-001
        description:
          type: string
          example: Primary inventory stock
        is_active:
          type: boolean
          example: true
        active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    StockRequest:
      type: object
      properties:
        name:
          type: string
          example: Main Stock
        code:
          type: string
          example: STK-001
        description:
          type: string
          example: Primary inventory stock
        is_active:
          type: boolean
          example: true
      required:
        - name
        - code
    StockResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Stock'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Stock retrieved successfully
    StocksResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Stock'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Stocks retrieved successfully
    UnitOfMeasure:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Piece
        abbreviation:
          type: string
          example: pcs
        description:
          type: string
          example: Individual item unit
        is_active:
          type: boolean
          example: true
        active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UnitOfMeasureRequest:
      type: object
      properties:
        name:
          type: string
          example: Piece
        abbreviation:
          type: string
          example: pcs
        description:
          type: string
          example: Individual item unit
        is_active:
          type: boolean
          example: true
      required:
        - name
        - abbreviation
    UnitOfMeasureResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UnitOfMeasure'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Unit of measure retrieved successfully
    UnitsOfMeasureResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UnitOfMeasure'
        meta:
          type: object
          properties:
            message:
              type: string
              example: Units of measure retrieved successfully
